<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威中文论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>


<div class="zhengwen">

<span style="margin-left:25px"></span>摘要Web应用系统采用了浏览器/服务器模式与用户进行信息交互，它以其便捷性和灵活性而被广泛的使用。
<br><br>
<span style="margin-left:25px"></span>该系统一般可以被分为三层结构，即客户端、 web服务器和数据库，然而随着系统规模不断的扩大以及复杂性的增加，使得每一层次以及之间极易发生故障，为了保证系统在生产环境中能够正确且高效的运行，这就需要在部署实施之前对其进行测试尤其是性能测试。相比于其他客户端系统，Web系统有其异构性、并发性、分布式等特点，这给系统的性能测试带来了新的挑战。本文以实习参与测试的项目-基于web的医疗保险信息管理系统为基础，研究了性能测试的相关内容，包括：
<br><br>
<span style="margin-left:25px"></span>性能测试的概念、性能指标、测试目的及过程、测试工具、国内外性能测试研究现状等。由于医疗保险信息管理系统模块繁多，所以在性能实施阶段，本文选取了其中的定价Pricing子系统为研究对象，采用JMeter测试工具对其进行性能测试的实施与分析。
<br><br>
<span style="margin-left:25px"></span>测试实施的主要内容包括：选择测试工具、制定测试方案、设计测试环境、设计测试场景。本文应用了并发瓶颈测试、内存泄露测试、功能性能测试、实际生产环境性能等测试场景，并分别讨论了各种场景中的测试策略、测试目标、测试结果及结论，最终得出系统中存在的性能瓶颈，为系统调优提供依据。关键词：
<br><br>
<span style="margin-left:25px"></span> Web系统，性能测试，JMeter，响应时间，服务器症状Abstract
<br><br>
<span style="margin-left:25px"></span>Web application systems use the browser/server mode to conduct information interaction with the users， it was widely used for its convenience and flexibility.
<br><br>
<span style="margin-left:25px"></span> The structure of the system generally can be divided into three layers， namely， the client， the web server and the database. However， with the increasing scale and complexity of the system， each level occurs failure extremely easily as well as between. In order to keep the system be able to operate correctly and efficiently in a production environment， which requires testing before the deployment， especially the performance testing. Compared to other client system， the Web system has its characteristics of isomerism， concurrency， distributed ，which brings new challenges to the system performance testing.Based on the  project I participate in as a QA intern - the medical insurance information management system based on web， studied the related content of the performance test， including:
<br><br>
<span style="margin-left:25px"></span> the concept of performance testing， performance indicators， purpose and process of testing， test tools， performance testing research status at home and abroad， and other. Due to the medical insurance information management system module is complex， this article selects the Pricing Pricing subsystem as the research object in the implementation stage of the performance testing，
<br><br>
<span style="margin-left:25px"></span> using JMeter as the test tool for the implementation of the performance testing and analysis. The implementation of the performance testing mainly include: choosing testing tools， developing test environment， designing the testing scheme， designing test scenarios. In the paper， there are many scenarios， such as concurrent bottleneck function testing， leak testing， function performance testing， the actual production performance test scenarios and so on. Then discuss the test strategy， test targets， test results and conclusions in the various scenarios. Finally conclude that exist performance bottlenecks in the system to provide the basis for system tuning.Key Words：
<br><br>
<span style="margin-left:25px"></span> Web system， The performance test， JMeter， Response time， Server symptoms第1章绪论
<br><br>
<span style="margin-left:25px"></span>1.1课题研究的背景及意义
<br><br>
<span style="margin-left:25px"></span>随着软件行业的发展，计算机软件的使用规模越来越大。
<br><br>
<span style="margin-left:25px"></span>web系统的应用也迅速普及，用户群的迅速扩大，对于大量用户访问web系统的性能提出了更高的要求。整个社会对软件质量的要求越来越高，软件性能测试成为了提高软件质量的一个关键保障。基于此，本文结合医疗保险信息系统的特点以及软件测试的管理，研究如何在web项目的开发过程中进行性能测试，以此提高软件开发的整体质量。1.2医疗保险信息管理系统性能测试的提出
<br><br>
<span style="margin-left:25px"></span>目前，作为和每个人切身利益相关的医疗保险信息系统被大家尤为关注，那么这其中，
<br><br>
<span style="margin-left:25px"></span>医疗保险的各项信息的整合和管理就变得比较复杂，传统的手工模式根本无法应付这项工程，于是，医疗保险信息系统就自然而然的出现在人们的面前。随着各种信息管理系统web应用的兴起，基于B/S模式的软件最近几年有了快速的发展，而且日益成为将来软件开发部署的趋势，所以，这里的医疗保险信息系统也是基于这种模式的。当开发人员将一个web软件开发出来并展示在用户面前时，尤其是在软件将被部署到生产环境之前，用户通常会产生以下的疑问：系统对用户的请求响应时间有多大？这个web软件能不能经得起大量并发用户的同时访问请求？软件系统的整体性能情况如何？长时间使用下，系统是否能够稳定运行？系统是否存在性能瓶颈？是什么制约了系统的性能？用户的疑问也正是web系统性能测试需要解决的问题，然而如何才能有效地执行web软件性能测试，目前还没有一个系统和完整的解决方案[1]。那么，如何对一个基于web的医疗保险信息管理系统有效的进行性能测试，更是没有一个系统而完整的答案。此外，由于紧凑的开发计划和复杂的系统架构，web应用的测试经常是被忽视的，所以开发的软件质量有好有坏，参差不齐，严重的会产生软件危机[2]。如果想对这些软件的质量进行把关，或者说尽可能的提高软件质量，就需要在软件开发过程中对软件进行测试，因此一些企业或者软件开发人员会对进行测试。即使进行了测试，其关注点也主要放在功能测试上，但功能测试只是对系统的基本功能做相关的测试，并没有考虑系统性能相关问题，一旦因为性能问题系统崩溃，将会给用户带来很不愉快的上网体验，也会因此给相关机构和企业带来损失。但是，近年来web性能测试越来越引起重视，成为web系统必不可少的重要测试内容。针对基于 web的医疗保险信息管理系统的性能测试的专门研究又不是很系统，因此，
<br><br>
<span style="margin-left:25px"></span>本文的研究就是源于上述这种需求，为 web的医疗保险信息管理系统进行基于目标的性能测试，从而同时尝试进行一些性能测试的研究，这些内容是很有意义的。1.3论文研究的目的
<br><br>
<span style="margin-left:25px"></span>本文以JMeter为测试工具，对基于web的医疗保险信息管理系统进行性能测试，以发现性能瓶颈，以提出提高其质量的调优方案。
<br><br>
<span style="margin-left:25px"></span>研究目标是：
<br><br>
<span style="margin-left:25px"></span>结合基于 web的医疗保险信息管理系统的特征，不仅用测试工具执行测试脚本来验证系统是否能够达到软件性能指标的要求，更重要的是能够在软件部署之前发现软件性能缺陷，定位系统瓶颈，并能够进行系统调优解决系统缺陷，后者才是软件性能测试的真正目的。本文对医疗保险信息管理系统的性能测试目标可分为以下两种层次：（1）性能测试总体目标。
<br><br>
<span style="margin-left:25px"></span>验证医疗保险信息管理系统是否能够达到用户的性能指标的需求，找出系统中可能存在的软件缺陷和性能瓶颈。运用测试工具进行性能测试并收集整理测试结果，分析产生缺陷的原因，提交总结报告，为软件开发人员对该系统性能调优提供依据。（2）性能测试具体目标。
<br><br>
<span style="margin-left:25px"></span>此目标又可以分为：确定此系统的总体性能参数，包括用户请求的响应时间、所能够支持的最大并发用户数、系统吞吐量等；
<br><br>
<span style="margin-left:25px"></span>确定在不同程度的负载及压力测试下，各个服务器的具体性能参数；
<br><br>
<span style="margin-left:25px"></span>判定系统的耐力强度；
<br><br>
<span style="margin-left:25px"></span>以上的这些性能测试目标指导着整个测试过程的执行，因而在此系统性能测试中发挥了至关重要的作用。
<br><br>
<span style="margin-left:25px"></span>1.4论文研究的主要内容
<br><br>
<span style="margin-left:25px"></span>本文主要是研究的是使用JMeter针对基于web的医疗保险信息系统性能进行测试，找出系统中需要改进的地方，使系统尽可能的完美。
<br><br>
<span style="margin-left:25px"></span>本文主要内容包括：
<br><br>
<span style="margin-left:25px"></span>1、业务场景选取
<br><br>
<span style="margin-left:25px"></span>熟悉系统应用，根据系统开发的逻辑来了解整个系统的架构，这样才能知道测试中需要模拟的应该是什么样的请求。
<br><br>
<span style="margin-left:25px"></span>了解和分析测试需求，确定测试业务场景和和性能测试指标。
<br><br>
<span style="margin-left:25px"></span>确定测试业务场景：
<br><br>
<span style="margin-left:25px"></span>根据用户需求中所描述的系统架构来分析性能测试的重点表现在哪几个方面，如：并发访问的性能、批处理业务执行效率、系统处理的稳定性等，同时结合系统架构分析可能存在的性能瓶颈，这个也是选择测试业务场景的基础。根据用户需求并结合实际，尽量做到对不同业务类型和操作类型的覆盖，如；
<br><br>
<span style="margin-left:25px"></span>对数据库的读操作（简单查询、复杂查询）、数据库的写操作（如：插入、删除和更新），选取一些具有代表性的业务操作作为测试业务场景。分析性能测试指标：
<br><br>
<span style="margin-left:25px"></span>（1）根据用户需求和所选取的典型业务场景，首先选取性能指标项，如：
<br><br>
<span style="margin-left:25px"></span>并发用户数、交易响应时间、每秒交易数（TPS）、服务器资源占用率、网络吞吐量等；（2）在选取性能指标项后，根据用户需求或总体设计文档对性能指标进行分析，获得各个性能指标项值，如：
<br><br>
<span style="margin-left:25px"></span>用户需求中说明了某个业务使用的用户数为N，但没有说明并发用户数，可以按照10%N~20%N来设置并发用户数。由于医疗保险信息系统的功能模块很多，基于论文篇幅原因，本文只考虑使用其中的定价模块作为研究对象，
<br><br>
<span style="margin-left:25px"></span>研究该模块测试场景的选取以及性能指标的确定等，性能测试指标考虑使用响应时间以及吞吐量。2、性能测试实施
<br><br>
<span style="margin-left:25px"></span>录制脚本、修改脚本参数、调试脚本和执行脚本。
<br><br>
<span style="margin-left:25px"></span>本文考虑，对定价模块可以从几个方面进行测试，如：
<br><br>
<span style="margin-left:25px"></span>并发瓶颈测试、内存泄露测试、功能性能测测试等。3、性能测试结果分析
<br><br>
<span style="margin-left:25px"></span>分析测试结果，获得执行脚本过程中所收集的性能指标值的分析报告，可以通过分析报告中的数据，得知系统的性能情况。
<br><br>
<span style="margin-left:25px"></span>最后，本文在总结性能测试结果，并分析性能瓶颈，得出建议优化措施，进而提高该系统的性能，使软件质量得到进一步的保障。
<br><br>
<span style="margin-left:25px"></span>1.5论文的组织结构
<br><br>
<span style="margin-left:25px"></span>论文一共分成6个章节。
<br><br>
<span style="margin-left:25px"></span>第一章，概述课题背景和意义、论文课题的提出、研究目的、研究内容和组织结构。
<br><br>
<span style="margin-left:25px"></span>第二章，对软件性能测试概念、软件性能测试目的、软件测试国内外现状、软件性能测试方法和工具等相关内容做叙述。
<br><br>
<span style="margin-left:25px"></span>第三章，对基于web的医疗保险信息系统进行概述，并分析分析系统性能测试的瓶颈，并对此系统提出相应的需求。
<br><br>
<span style="margin-left:25px"></span>第四章，主要讲性能测试的实施，其中包括性能测试工具的选择、性能测试的平台选择、测试方案的制定、测试环境设计、测试场景设计、测试场景的执行等。
<br><br>
<span style="margin-left:25px"></span>第五章，对系统进行并发瓶颈测试、内存泄漏测试、功能性能测试、实际生产环境性能测试、排除网络传输的性能测试。
<br><br>
<span style="margin-left:25px"></span>第六章，对实施的项目作总结。
<br><br>
<span style="margin-left:25px"></span>第2章软件性能测试的研究
<br><br>
<span style="margin-left:25px"></span>2.1软件性能测试概述
<br><br>
<span style="margin-left:25px"></span>2.1.1软件性能概述
<br><br>
<span style="margin-left:25px"></span>系统的性能是个很大的概念，覆盖面非常广泛，它是指软件所拥有的一种非功能性的特征，它关注的不是软件能否实现某一个功能，
<br><br>
<span style="margin-left:25px"></span>而是指软件在完成实现这些个功能之上所表现出来的效率、及时性等能力。而对于软件性能的感受是主观的概念，由于每一个人的主体不一样，其对软件性能的感受以及关注的角度也不一样。具体来说软件性能包括执行效率、资源占用、稳定性、安全性、兼容性、可扩展性、可靠性等等。
<br><br>
<span style="margin-left:25px"></span>也即是，性能是指表明软件系统或构件对于其及时性要求符合程度的指标。属于产品的特性范畴，可以用响应时间、吞吐量、每秒点击数等参数指标来进行衡量。对于互联网应用软件，性能是其质量的一个非常重要的组成部分。在软件行业通常对软件的性能概念中，具体说明以下六条指标：响应时间
<br><br>
<span style="margin-left:25px"></span>响应时间是指软件系统对用户请求所执行响应的时间[3]。
<br><br>
<span style="margin-left:25px"></span>这一指标也与每个人的直观感受有关，软件系统的会存在许多不同的功能模块，它们的处理逻辑不相同，它们对用户的相应时间也不一致，况且即使同一个功能由于输入参数的不同，也会产生响应时间不相同的现象。因而在衡量这一指标时，一般指的是系统中所有功能模块的平均响应时间或者最大响应时间。但是需要说明的是，响应时间绝对值不能直接反应系统性能的高低程度，这一指标还取决于用户对系统响应时间的接受程度。对于不同的软件系统，例如游戏软件和编译软件，响应时间同样的都是一分钟，但是对于游戏这样的响应时间无疑用户是不能接受的，但是对于编译软件来说，这样的响应时间甚至表明该软件系统性能很高。在基于web的B/S架构软件系统中，软件开发仅仅只是在服务器端，呈现给用户的响应时间包含了服务器响应时间以及浏览器呈现服务器数据所用的时间。
<br><br>
<span style="margin-left:25px"></span>后者与浏览器以及用户所处的计算机配置有关，而软件测试中更关注的是前者。而前者还包括了应用延迟时间和网络传输时间。应用延迟时间
<br><br>
<span style="margin-left:25px"></span>应用延迟时间指的是软件系统处理用户请求的真实时间，如下图所示响应时间=网络传输时间+应用延迟时间，
<br><br>
<span style="margin-left:25px"></span>即（ N1+ N2+ N3）+（ A1+ A2+ A3），而其中系统延迟时间包括 A1、 A2、 A3时间总和。所以应用延迟时间更能评价系统性能。图 2.1 应用响应时间及延迟时间
<br><br>
<span style="margin-left:25px"></span>吞吐量
<br><br>
<span style="margin-left:25px"></span>吞吐量指的是系统在单位时间内能够处理请求的数量。
<br><br>
<span style="margin-left:25px"></span>在并发多用户使用的系统中，如果单个用户的平均响应时间是t，那么n个用户使用系统时，此时的平均响应时间不会是n*t，而会远远小于这个数值。不同系统的平均响应时间随着用户量增加而增长的趋势各不相同，所以采用吞吐量来衡量软件系统的性能。并发用户数
<br><br>
<span style="margin-left:25px"></span>并发用户数指的是软件系统能够同时承受的最大用户数量。
<br><br>
<span style="margin-left:25px"></span>与这个概念相关的还有系统用户数以及同时在线用户数。实际上，服务器承受的压力不止取决于并发用户量还与业务场景有关。以下计算公式能够衡量这一指标：公式（2.1）平均并发用户数
<br><br>
<span style="margin-left:25px"></span>公式（2.1）并发用户数峰值
<br><br>
<span style="margin-left:25px"></span>其中公式（2.1）中，C是平均的并发用户数，n是Login Session数量，L是Login Session的平均长度，T是考察的时间段长度。
<br><br>
<span style="margin-left:25px"></span>其中公式中（2.2），C'表示用户并发数的峰值，该公式假设用户Login Session符合泊松分布。
<br><br>
<span style="margin-left:25px"></span>资源利用率
<br><br>
<span style="margin-left:25px"></span>资源利用率指的是一段时间内系统资源平均被占用比列。
<br><br>
<span style="margin-left:25px"></span>对于数量只为一的资源，资源利用率指的是资源被占用的时间与整段时间的比例，对于数量不唯一的资源，资源利用率指的是一段时间内所使用资源的数量与所有资源数量的比例。每秒请求数目和会话数目
<br><br>
<span style="margin-left:25px"></span>每秒会话请求数目是指每秒钟到达web服务器的GET或者POST请求的数目。
<br><br>
<span style="margin-left:25px"></span>每秒会话数目是指每秒钟到达并访问网站的用户数量。对于不同的软件角色，如：
<br><br>
<span style="margin-left:25px"></span>系统管理员、软件开发人员、用户等，他们所关注软件性能侧重面也不一样，具体不同点如下所述：从用户角度来说，用户关注的是系统对用户的请求的响应时间；
<br><br>
<span style="margin-left:25px"></span>从管理员角度来说，他会关注应用延迟时间、应用服务器的运行状态、系统并行用户数以及峰值、系统瓶颈等软件性能指标；
<br><br>
<span style="margin-left:25px"></span>从开发人员角度来说，在软件性能方面，他会比较在意软件系统对用户的响应时间、软件在性能方面的扩展性等，具体来说开发人员最关心
<br><br>
<span style="margin-left:25px"></span>“如何通过调整代码之间的结构以及采用编码方式来提高软件性能”等，如下表所示：表2.1 开发人员关注的软件性能
<br><br>
<span style="margin-left:25px"></span>软件开发人员关心的问题
<br><br>
<span style="margin-left:25px"></span>问题所属环节
<br><br>
<span style="margin-left:25px"></span>架构设计合理吗？
<br><br>
<span style="margin-left:25px"></span>系统架构
<br><br>
<span style="margin-left:25px"></span>数据库设计合理吗？
<br><br>
<span style="margin-left:25px"></span>数据库设计
<br><br>
<span style="margin-left:25px"></span>是否存在影响软件性能的代码？
<br><br>
<span style="margin-left:25px"></span>代码
<br><br>
<span style="margin-left:25px"></span>内存使用方式是否合理？
<br><br>
<span style="margin-left:25px"></span>代码
<br><br>
<span style="margin-left:25px"></span>线程同步方式是否合理？
<br><br>
<span style="margin-left:25px"></span>代码设计
<br><br>
<span style="margin-left:25px"></span>系统资源竞争是否合理？
<br><br>
<span style="margin-left:25px"></span>代码设计
<br><br>
<span style="margin-left:25px"></span>2.1.2软件性能测试概述
<br><br>
<span style="margin-left:25px"></span>软件性能测试可以从狭义和广义两个方面进行考虑，狭义的性能测试是指通过成熟的自动化的
<br><br>
<span style="margin-left:25px"></span>测试技术及工具在正常以及极端生产运行的业务压力和用户使用环境中模拟多重正常、峰值以及异常负载条件下系统各性能指标是否能够满足生产性能的需求而进行的一项测试。广义的性能测试则是压力测试、负载测试、强度测试、并发测试、容量测试、配置测试、可靠性测试等，其中最重要的是负载测试和压力测试。测试软件性能测试是解决软件性能问题的重要手段，软件性能测试已经广为人们所熟悉，并受到很高的关注。性能测试本质上是一项规范，它利用有关产品、人员和过程的信息来减少应用程序、升级程序或修补程序部署中的风险。到目前为止，性能测试仍然是控制性能的非常有效的手段，在软件的能力验证、能力规划、性能调优、缺陷修复等方面都发挥着重要作用。
<br><br>
<span style="margin-left:25px"></span>性能测试原理如下图所示：图 2.2 性能测试原理图
<br><br>
<span style="margin-left:25px"></span>2.1.2.1性能测试目的
<br><br>
<span style="margin-left:25px"></span>性能测试目标可以分为两个层次：
<br><br>
<span style="margin-left:25px"></span>基本目标和高级目标。其中基本目标包括两个方面：
<br><br>
<span style="margin-left:25px"></span>评估系统能力和检测软件中的问题。评估系统软件性能指的是测试软件系统在用户正常使用环境下的各个性能指标参数的状况以及应用能否达到用户的需求指标，主要包括 HTTP响应时间、应用延迟时间、吞吐量等指标。检测软件中的问题指的是发现测试过程中软件出现的一些问题，如：内存泄露、数据存储等隐含问题[4]。高级目标同样包含两个方面：
<br><br>
<span style="margin-left:25px"></span>识别系统中的瓶颈和系统调优。经过性能测试发现系统中存在的系统性能缺陷以及瓶颈，确认这些指标能否达到了用户的需要，整理性能测试结果并分析造成这些性能缺陷的原因，撰写性能测试报告，为软件开发人员提交软件改进以及性能优化的依据建议。基于以上的测试结果，开发人员可以对系统各个瓶颈进行调整优化。2.1.2.2性能测试过程
<br><br>
<span style="margin-left:25px"></span>根据软件工程的方法，性能测试可以划分为五个阶段，如下图所示：
<br><br>
<span style="margin-left:25px"></span>图 2.3 性能测试过程
<br><br>
<span style="margin-left:25px"></span>1、性能需求分析阶段
<br><br>
<span style="margin-left:25px"></span>该阶段的主要过程包括通过需求分析收集测试信息以及确定测试需求。
<br><br>
<span style="margin-left:25px"></span>该阶段是测试过程中很重要的一个阶段，它直接与性能测试的有效性相关联。测试需求可以从相关的文档中获取，所以在这个过程中，通过向软件开发方或者开发人员获取系统需求说明书，用户使用手册等以及通过当面交谈咨询提问的方式获取软件测试信息[5]，然后对收集到的信息进行过滤、筛选、排除，确定合格规范的测试需求，最终撰写出软件性能测试需求说明书。需求分析主要包括两个内容：
<br><br>
<span style="margin-left:25px"></span>一、确定测试目的；二、确定性能测试指标。其中测试目标包括三类：性能符合性验证及性能能力验证和性能调优。其中性能符合性验证是验证软件是否符合设定的目标以及用户的应用要求。性能力验证即是了解软件的整体性能指标状况。确定性能指标主要是为后续测试提供一个标准，从而判断测试结果以及测试的结束[6]。2、测试方案设计阶段
<br><br>
<span style="margin-left:25px"></span>该阶段包括两个方面：
<br><br>
<span style="margin-left:25px"></span>确定测试场景以及监视指标。其中确定测试场景是在上一个阶段工作成果的前提之下，根据不同的测试需求，选取相应的测试业务，并采用场景设计方法确定实际测试业务场景，包括实际应用情况，如：测试的业务、业务的用户数量等，同时在确定测试场景时主要需要考虑稳定性、并发性以及硬件等指标。3、测试实施阶段
<br><br>
<span style="margin-left:25px"></span>该阶段主要是把上一个阶段的软件测试场景付诸于实施，然后通过分析确定系统缺点瓶颈。
<br><br>
<span style="margin-left:25px"></span>该阶段可以细分成两个部分：性能测试实施和性能瓶颈分析。其中，在测试实施阶段主要包括选用测试场景进行压力测试、负载测试等，同时还需要对系统资源进行监控。
<br><br>
<span style="margin-left:25px"></span>在该阶段还包括了测试之前的准备工作，如：测试环境的搭建、生成测试脚本、布置测试场景、执行测试场景[7]。（1）测试环境搭建及数据准备
<br><br>
<span style="margin-left:25px"></span>这里的测试环境包括软件和硬件环境以及数据环境。
<br><br>
<span style="margin-left:25px"></span>为了测试结果的准确性，必学搭建独立、逼真的软硬件环境和网络环境，安装测试软件。准备的测试数据可以自己选取准备也可以从用户方获取，但是必须确保测试数据的合法规范，要避免无效不合法的垃圾数据，而且测试数据必须要包含了完整的业务流程的全部方面，以下就环境搭建和数据准备两个方面具体分析：环境搭建
<br><br>
<span style="margin-left:25px"></span>测试环境搭建尽量与真实运行环境大致一样，这样测试结果才有参考价值。
<br><br>
<span style="margin-left:25px"></span>营造独立的测试环境，被测系统在预期性能测试执行期间应保证其资源独占性，
<br><br>
<span style="margin-left:25px"></span>即测试过程中要确保测试环境独立，避免测试环境被占用，影响测试进度及测试结果，比如设备连网后，如果其他开发组或测试组也在共用，这样就可能影响测试结果。有时开发人员为确定问题会使用测试环境，这样会打乱测试活动，更严重的是影响测试进度。因此需要为本次测试搭建独立的测试环境。构建可复用的测试环境，项目实际执行过程中，测试环境是经常变化，比如测试软件版本更新、测试人员流失等等，需要随时跟踪和改进，尽量将可控的资源进行分类整理。
<br><br>
<span style="margin-left:25px"></span>可控资包括：测试环境配置手册、测试硬件信息、环境变更记录等等，目的是尽量将测试环境进行备份，方便出现未知问题时快速的还原。当刚搭建好测试环境，安装测试软件之前及测试过程中，对操作系统及测试环境进行备份是必要的，这样一来可以为下轮测试时直接恢复测试环境，避免重新搭建测试环境花费时间，二来在当测试环境遭到破坏时，可以恢复测试环境，避免测试数据丢失，重现问题。测试数据准备
<br><br>
<span style="margin-left:25px"></span>在实施性能测试时，需要运行系统相关业务，这时需要一些数据支持才可运行业务，这部分数据即为初始测试数据，
<br><br>
<span style="margin-left:25px"></span>数据准备和清理的工作量是非常大的，需要在测试前提前考虑。为更加真实的模拟现实运行环境，在测试过程中，应尽可能准备与真实业务执行相一致的初始数据，如系统用户数据、业务数据、辅助数据等。系统用户数据：
<br><br>
<span style="margin-left:25px"></span>登陆系统使用的帐户名、口令等，数量与虚拟用户数一致；业务数据：
<br><br>
<span style="margin-left:25px"></span>每个虚拟用户模拟真实用户进行操作时使用到的数据；辅助数据：
<br><br>
<span style="margin-left:25px"></span>为保证业务操作的正常进行而设置的基本信息资料。此外，测试数据可分可重用和不可重用数据；可重用数据：
<br><br>
<span style="margin-left:25px"></span>如客户信息等查询类的数据，此类数据只需一次准备即可；不可重用数据：
<br><br>
<span style="margin-left:25px"></span>此类数据为一次性消耗数据，不可重用，一般应用在数据增加或修改类业务交易，此类数据如增加客户标识、帐户标识等。（2）测试脚本生成
<br><br>
<span style="margin-left:25px"></span>测试脚本可以自己手工编写还可以由测试工具自动生成，但是必须要求脚本信息的有效性，为了使脚本与实际运行相吻合，还需要对脚本进行参数化、动态数据关联等操作；
<br><br>
<span style="margin-left:25px"></span>（3）测试场景布置
<br><br>
<span style="margin-left:25px"></span>根据设计好的测试场景布置各个测试场景，包括虚拟用户数、性能指标的设置；
<br><br>
<span style="margin-left:25px"></span>（4）测试场景执行
<br><br>
<span style="margin-left:25px"></span>测试场景布置完成之后，就可以按照开始执行性能测试实施了。
<br><br>
<span style="margin-left:25px"></span>在测试过程中，需要根据碰到过多的错误，需要终止测试、查找原因。如果是非软件方面的原因，需要及时排除，重新测试；如果是碰到了软件方面的原因，需要记录测试结果，以便后续的结果分析。需要注意的时，在测试实施之前，需要将测试环境初始化到原始最初的状态。在性能瓶颈分析部分，对比分析测试结果数据与标准指标数据，确定软件系统系能是否存在瓶颈。
<br><br>
<span style="margin-left:25px"></span>系统瓶颈主要包括三个方面软件代码级别、软件配置级别和操作系统级别。其中代码级别包括内存堆栈使用是否溢出、资源获取是否死锁等信息；软件配置级别包括数据库连接数以及内存分配等配置、虚拟机配置等信息；操作系统级别包括服务器的硬盘读写速度、内存大小、CPU等。4、测试结果分析阶段
<br><br>
<span style="margin-left:25px"></span>该阶段是测试所有环节中重要的部分，也是难点。
<br><br>
<span style="margin-left:25px"></span>首先，查看软件测试结果中是否出现错误以及超时信息，如果出现了，需要进一步查找原因，如：程序代码、算法、设置参数问题、硬件问题。5、性能调优阶段
<br><br>
<span style="margin-left:25px"></span>根据上诉软件测试阶段的实施以及瓶颈分析步骤之后，本阶段主要是通过调优方法，对系统性能瓶颈进行调优，消除性能隐患。
<br><br>
<span style="margin-left:25px"></span>同样的，与性能瓶颈相一致，性能调优也包括三个方面：分别是代码级别调优、软件配置级别调优、操作系统级别调优。其中，操作系统级别调优主要检查操作系统配置是否合理，如果通过操作系统配置还不能提高性能，则需要考虑升级系统硬件。软件配置调优主要是通过合理配置应用系统中的数据库连接数或者虚拟机内存等参数来提高系统。代码级别的调优主要是通过组织代码编写结构、修补造成内存泄露的代码等方式来消除代码执行效率低的问题[8]。2.1.2.3Web系统性能测试
<br><br>
<span style="margin-left:25px"></span>随着互联网的发展，基于web的各种网络应用正以其广泛性和快捷易用性改变了人们的生活工作方式，而变得越来越受到企业的青睐。
<br><br>
<span style="margin-left:25px"></span>web应用部署非常便利，而且用户只需要通过浏览器客户端即可以访问web系统应用，所以web应用系统正逐步取代以前的客户端/服务器（C/S）结构的应用。随着 web软件的负责性以及规模的不断增加，如果应用的访问量不断增长，会使得 web应用的负载急剧加重从而反应迟缓，严重的甚至网站瘫痪，这极度的影响了系统的正常运行以及用户的体验感受。因此，这就需要在web应用上线发布之前，利用性能测试技术及工具对其性能和行为进行测试，评估其负载能力、可靠性和稳定性。这样不仅可以增强系统的性能，而且还能够加快开发的进度，让用户对系统充满信心。由于web系统与传统的软件系统存在着很大的不同，所以对它们的测试也会有所不同，而且web系统的测试要比传统软件系统的测试要复杂很多。因此，对web系统的测试是一项艰巨重要的任务，而且该过程已经成为了web系统开发中一个及其重要的组成部分，它直接决定了系统是否能够上线运行。 Web性能测试需要借助测试工具来模仿真实用户对 Web系统进行施压，在正常和疲劳情况下检测系统的各项指标，
<br><br>
<span style="margin-left:25px"></span>预测系统是否满足特定的场景和发现系统瓶颈的过程。主要目的是在并发环境下，评估系统的承受力、发现系统弱点，系统优化和保证系统长时间运行的可靠、安全和稳定。同前文所述，web系统性能指标有以下几点：响应时间、吞吐量、用户放弃率、用户行为。其中的前两点在前文中已经描述过，此处不再赘述。用户对一个web软件系统是否成功最具有话语权，由于每一个用户的需求感受不一样，所以很难有一个确定的答案。然而系统的响应时间是一个直观的反应，是判断用户的满意度的一个重要指标。现如今存在八秒定律，即用户访问一个web系统，如果用户等待一个网页的时间超过了八秒钟，会有超过70%的用户选择放弃等待。当然，在web系统性能测试中，还会有许多其他的指标，如：页面请求次数等，这些在测试过程中，应当全面充分地考虑这些指标。2.2软件测试国内外现状
<br><br>
<span style="margin-left:25px"></span>目前，国外的软件行业把软件测试过程作为软件工程中的重要环节，软件测试以及成为非常独立的行业。
<br><br>
<span style="margin-left:25px"></span>而且在许多国外的一些大型软件企业中，软件测试人员在开发测试人员中所占的比例非常高，通常都是70%-80%[9]。国外在web性能测试方面的研究比较深入，从事研究的大学机构主要有美国的George Mason大学、英国的Durham大学等[10]。自动化测试系统已经变得更加的通用化、智能化、标准化，其中上世纪90年代以来，以综合通用的自动化测试为主导，替换某一系列的产品[11]。国内外对性能测试的研究取得了一定的成果，并提出了一些性能测试的模型、方法策略等，例如：印度的InfosysTechnologies公司的对象驱动测试模型等。从开源免费的测试工具到商用昂贵的测试工具，现如今许多国外公司机构开发了许多性能测试的工具。一些功能完善的工具，它们的开发量很是庞大，所以这些工具一般都是非常昂贵，例如：Compuware公司的QALoad；HP Mercury的LoadRunner测试工具，SilkPerformer最高级的企业级别负载测试工具，RadView公司的WebRunner性能测试与分析工具。其中， HP LoadRunner是一款预测系统行为和性能的自动化性能测试产品，该产品来自于为 HP进行应用负载测试的测试自动化产品，
<br><br>
<span style="margin-left:25px"></span>它能够检查系统在实际生成负载时的行为以及性能[12]。在2006年11月份HP收购了Mercury Interactive。LoadRunner通过创建虚拟用户代替真实用户来操作客户端软件，例如： IE浏览器，使用 HTTP协议发送请求到 IIE或者 Apache web服务器，它可以模拟成千上万的并发用户将应用程序通过严酷的真实用户负载以及实时性监控，而从关键的基础设施组件（ web服务器、数据库服务器等）收集信息来进行详细分析探索特定行为的原因，找出系统的问题缺陷。LoadRunner支持各种协议包负载测试：.NET记录/回放，数据库，DCOM，GUI虚拟用户，Java记录/回放，网络，Oracle电子商务，远程访问，远程桌面，富互联网应用等。它的功能非常强大，但是价格也非常的昂贵。免费测测试工具有微软的Web Application Stress Tool工具，OpenSTA等。
<br><br>
<span style="margin-left:25px"></span>其中OpenSTA是一款功能丰富的基于GUI基准实用程序，它可以执行脚本进行HTTP和HTTPS衡量性能指标的负载测试，它现如今只能运行于windows系统中。它的脚本是一个被称为“sci”语言的记录，这是一种相当简单的编码语言，支持自定义函数、变量的作用域和随机或顺序列表。而且测试脚本录制完成之后，还可以对其进行按照指定语法的编辑，以满足特定性能指标的分析，它的丰富的图形化界面，极大的方便了测试结果的展示分析。 OpenSTA是基于 CORBA的体系结构，它可以虚拟出代理客户，并应用其脚本语言记录通过该代理的所有 HTTP/ HTTPS的通信量，测试人员分析 OpenSTA中的各个性能收集器中的性能指标数据，对整个应用系统进行性能的分析。OpenSTA最初是由Cyrano公司所编写开发，它们原本想在OpenSTA中编写商业插入模块和支持非web应用程序的性能测试，后来由于资金困难，在2001年被Quotium接管。它的优点就是支持脚本语言而且其压力测试引擎具有可扩展性，可以进行大规模的压力测试。目前，国内研究软件性能测试的机构还是寥寥几家，例如：
<br><br>
<span style="margin-left:25px"></span>中国软件测评中心等，而且这些机构缺乏商业化的操作，而且这些一般是政府部门主导下的机构进行软件验收的工作，其对于软件测试没有实质性的作用。国内的研究软件测试的大学主要有清华大学、东南大学、武汉大学等，并取得了一些成果，其中东南大学在web测试框架方面的研究取得了一些成果[13]。国内的软件测试在软件开发公司中的地位不高，大部分测试只是停留在功能测试、单元测试。而且软件测试人员的测试技术和规范化程度普遍都不太高[14]。软件测试人员的数量所占开发测试技术人员总数的比例只有15%左右。从一些文献资料来看，国内对性能测试的研究水平还比较低，而且国内研究开发的测试工具数量很少，这或许与国内的软件开发的发展有一定得紧密联系。
<br><br>
<span style="margin-left:25px"></span>国内的软件测试还处于不成熟的发展水平，要想超过国外的水平还需要很长的时间。但是在国内，软件测试还属于新兴的行业，其发展速度还是非常快的，相信随着国内软件行业及知识产权保护的发展，性能测试的研究必定会越来越成熟。2.3软件性能测试方法
<br><br>
<span style="margin-left:25px"></span>根据性能测试的目的和内容的不同，常见性能测试方法可以分为以下几种：
<br><br>
<span style="margin-left:25px"></span>强度测试是指在极端匮乏的系统以及网络资源等条件下，监控分析系统的CPU、内存、硬盘使用量、网络带宽等变化情况。
<br><br>
<span style="margin-left:25px"></span>负载测试是指在用户正常使用软件的环境下，逐渐地给软件增加负载，观察记录分析系统在各个性能指标方面的变化情况，
<br><br>
<span style="margin-left:25px"></span>最终确定软件在满足软件性能指标的情况下，系统最能承受的最大负载量[15]。压力测试是指在正常使用软件的环境中，逐渐增加软件负载，观察软件各个性能的变化，最终确定软件在什么负载状况下，
<br><br>
<span style="margin-left:25px"></span>软件的运行状态会处于失效状态，并以此确定软件能够提供的最大服务级别[16]。并发测试是指逐渐增加软件的并发用户数量，确定软件的系统缺陷和瓶颈和不能接受的性能点，该测试结合了压力测试和负载测试。
<br><br>
<span style="margin-left:25px"></span>稳定性测试是指软件在正常运行状态下，给应用加载一定的负载压力，测试软件能够在这种状况下正常稳定运行的时间，
<br><br>
<span style="margin-left:25px"></span>从而考察软件各个性能参数指标在此压力环境下的能够保持正常的数值，它主要测试检验软件能够长时间稳定运行的能力[17]。大数据量测试是指测试软件在大数据量情况下，系统的存储、数据查询、数据传输等业务是否能够有明显的不足或者这些方面性能的下降。
<br><br>
<span style="margin-left:25px"></span>容量测试是指软件在极限值状态下，检验软件应用是否能够正常运行或者出现各种软件故障，从而确定软件在一定的时间段内，能够持续运行的最大负载。
<br><br>
<span style="margin-left:25px"></span>2.4软件性能测试工具介绍
<br><br>
<span style="margin-left:25px"></span>性能测试工具可以分为以下四种：
<br><br>
<span style="margin-left:25px"></span>负载测试工具、资源监控工具、故障定位工具以及系统调优工具。其中主要为负载测试工具，以下文中主要介绍主流的负载测试的工具。负载测试工具的工作原理主要是通过脚本录制、脚本回放、模拟多个用户同时高并发地访问应用系统，
<br><br>
<span style="margin-left:25px"></span>这样能够制造出高负载环境，从而产生并记录各性能指标的测试数据，形成测试结果报告，找出系统的瓶颈为系统调优提供依据。2.4.1Compuware QALoad
<br><br>
<span style="margin-left:25px"></span>QALoad：
<br><br>
<span style="margin-left:25px"></span>它是美国Compuware公司研发的客户/服务器（C/S）系统、企业资源配置（ERP）和电子商务应用的自动化负载测试工具[18]。它能够模拟成千上万个并发的虚拟用户对系统的关键部分进行负载测试，从而能够发现系统中的问题，为系统优化以及成功部署提供保障。它能够进行负载测试一直达到最大并发数；可以进行强度测试，找出可以承载的最大并发数；可以测试响应时间，给出用户的性能体验。它主要的用途有如下几个：创建仿真的负载测试、控制中心管理全局负载、重复执行发现系统瓶颈、集成的系统资源视图等。它支持的协议非常广泛，包括在通信层的Winsock、IIOP、WWW、WAP；数据层的ODBC、MS SQL Server、Oracle、DB2、Sybase等；应用层的SAP、Uniface、JAVA等。它的体系结构如下图所示：
<br><br>
<span style="margin-left:25px"></span>图 2.4 QALoad体系结构
<br><br>
<span style="margin-left:25px"></span>由上图的体系结构可知，QALoad的测试组件由两个部分组成：
<br><br>
<span style="margin-left:25px"></span>QALoad Conductor，它控制所有的测试行为，如：
<br><br>
<span style="margin-left:25px"></span>初始化、设置描述文件、生成测试结果，并进行分析产生测试报告。QALoad Player，创建多个虚拟并发的用户来向服务器发送请求调用。
<br><br>
<span style="margin-left:25px"></span>它的开发组件包括：
<br><br>
<span style="margin-left:25px"></span>脚本编辑工具、记录工具、转换工具。QALoad是QACenter性能版的一部分，它通过可重复的、真实的测试能够彻底地度量应用的可扩展性和性能。
<br><br>
<span style="margin-left:25px"></span>QACenter汇集完整的跨企业的自动测试产品，专为提高软件质量而设计。QACenter可以在整个开发生命周期、跨越多种平台、自动执行测试任务。2.4.2SilkPerformer
<br><br>
<span style="margin-left:25px"></span>SilkPerformer是软件测试行业中最强大以及最容易使用的企业级别负载测试和强度测试工具，它能够对关键任务应用的质量进行优化。
<br><br>
<span style="margin-left:25px"></span>它使用可视化的脚本生成技术以及能够对拥有成千上万并发用户的应用系统进行性能测试，能够使软件开发公司在应用系统发布部署之前，无需考虑软件规模的大小和复杂程度，对其进行可靠性、稳定性以及可伸缩性进行完整的性能测试。 SilkPerformer拥有强大的诊断工具和测试报告管理功能，它能够帮助隔离出系统的故障错误并快速做出处理措施，从而能够从最大程度上缩短软件测试的周期以及加快软件系统上线的速度。SilkPerformer允许创建强大现实的负载测试和压力测试用户一系列应用程序环境，包括最新的网络和移动技术。负载测试解决方案主要模拟任何大小的峰值负荷，从而用户没有必要投资负载测试和压力测试的硬件和设置。在发布周期的早期，尽早发现问题能够使开发人员在软件到达最终用户之前纠正问题，减少项目周期时间和开发成本。SilkPerformer主要有以下几个功能：
<br><br>
<span style="margin-left:25px"></span>部署多个虚拟用户节点，由单一的中央控制器对它们进行管理并进行实时监控，如图所示SilkPerformer体系结构；
<br><br>
<span style="margin-left:25px"></span>SilkPerformer可以将不同的用户进行分组并且将每个组分布到不同机器上，这样可以模拟不同地理位置的空间分布。
<br><br>
<span style="margin-left:25px"></span>而且，用户还可以对应每一个类型，不同类型可以使用不同的负载；SilkPerformer可以模拟很多种不同类型的网络，支持的网络类型甚至达到了30中之多，如：
<br><br>
<span style="margin-left:25px"></span>wireless，GPRS，Modem等。每一种类型，用户都可以进行各自参数的设置；SilkPerformer采用TrueCache技术，可以模拟不同浏览器的缓存、cookie管理，这样极大的模拟实际情况的负载，而且HTTP请求都是精确的符合实际情况；
<br><br>
<span style="margin-left:25px"></span>图 2.5 SilkPerformer体系结构
<br><br>
<span style="margin-left:25px"></span>SilkPerformer能够模拟不同类型的虚拟用户负载策略，包括：
<br><br>
<span style="margin-left:25px"></span>持续增加虚拟用户数、动态变化虚拟用户数、全天候虚拟用户数等，每一种都可以进行不同参数的设置；SilkPerformer支持的协议很广泛，主要支持的协议如下所示：
<br><br>
<span style="margin-left:25px"></span>流媒体协议-Macromedia Flex/AMF、Streaming（MS，Real）等
<br><br>
<span style="margin-left:25px"></span>数据库访问协议-ODBC、Oracle OCI等
<br><br>
<span style="margin-left:25px"></span>网络协议-HTTP/HTTPS、SMTP/POP、FTP、TCP/IP等
<br><br>
<span style="margin-left:25px"></span>其他商用的负载测试工具还有HP LoadRunner、RadView WebRunner等，通常这些商用的工具由于功能很完善，软件公司花费了巨大的人力资金进行开发，所以这些软件一般都会比较昂贵。
<br><br>
<span style="margin-left:25px"></span>市面上还会有一些免费或者开源的测试软件，如：OpenSTA、WAS（Web Application Stress Tool）、Apache JMeter等。其中，WAS是由微软的web测试人员开发的，可以专门进行实际网站的压力测试，该工具可以使用少数的几台计算机设备来模拟大量用户对网站进行并发请求的负载。
<br><br>
<span style="margin-left:25px"></span>2.4.3Apache JMeter
<br><br>
<span style="margin-left:25px"></span>2.4.3.1JMeter性能测试工具的体系架构
<br><br>
<span style="margin-left:25px"></span>JMeter是一个很流行的开源性能测试工具，纯Java的可用于动态和静态两种资源的性能的测试。
<br><br>
<span style="margin-left:25px"></span>并且可以模拟系统在不同负载压力情况下系统会有什么样的反应，这种反应带来什么样的结果，以及在不断加压的时候，系统会不会承受的住，找出系统所能承受的极端压力高峰值，这样就可以为系统调优做好基础数据准备的工作。 JMeter主要是使用各种原件来创建测试所要用到的测试用例，也就是新建一个测试计划，这个计划描述了测试执行时的步骤，并且，可以在查看结果树等的图标中直观的显示出来，而执行的结果或脚本则可以保存下来（ XML格式）。在JMeter中一个测试计划会包括线程组、控制器、配置元件、定时器、前置处理器、后置处理器、断言、监听器等[19]。以下将会对这几个部分一一介绍：线程组就是控制JMeter执行测试计划时所使用的线程数量，可以设置每个线程的间隔实际，也可以设置测试要执行的次数，当然，这些线程之间是相互独立的，互相不干扰的执行测试计划。
<br><br>
<span style="margin-left:25px"></span>图 2.6 JMeter操作界面
<br><br>
<span style="margin-left:25px"></span>控制器则包括取样器（Sampler）和逻辑控制器。
<br><br>
<span style="margin-left:25px"></span>取样器（Sampler）指示JMeter向一个服务器发送请求。
<br><br>
<span style="margin-left:25px"></span>例如，如果想让JMeter发送HTTP请求，那么添加一个HTTP请求器。可以向一个取样器中添加一个或多个配置元件来定制请求。逻辑控制器允许定制JMeter何时发送请求。
<br><br>
<span style="margin-left:25px"></span>例如，可以添加交替（Interleave）逻辑控制器来在两个HTTP请求取样器之间轮流。查看逻辑控制器获得更多信息。配置元件（Config Elements）：
<br><br>
<span style="margin-left:25px"></span>配置元件是与测试脚本中的配置有着一定的关联度，例如用户变量、 cookies设置、 HTTP请求、头的设置等，它是与取样器关联在一起工作的，可以定制和修改服务器发送到请求，但是却不能添加请求。定时器，JMeter线程发送出的每个请求是不间断的。
<br><br>
<span style="margin-left:25px"></span>建议可以通过添加一个可用的定时器到线程组里来指定延迟时间。如果不添加延时，JMeter可能在较短的时间内发送大量的请求致使服务器瘫痪。定时器将导致JMeter在线程组里，在每个请求间，延迟一定时间。
<br><br>
<span style="margin-left:25px"></span>如果想在一个线程组里添加一个以上的定时器，JMeter会在执行所应用的那个取样器之前累加所有的计时器，然后以那累加后的时间来做停顿。
<br><br>
<span style="margin-left:25px"></span>前置处理器：
<br><br>
<span style="margin-left:25px"></span>对取样器做前置处理，如设置用户参数、URL重写等或者更新一些无法从response文本中获取的变量。后置处理器：
<br><br>
<span style="margin-left:25px"></span>对取样器请求的结果做后置处理，主要用于处理请求返回的响应数据，从中获取某些信息或值，如提取响应信息等。断言允许你断言从被测的服务器端接收到的响应的事实。
<br><br>
<span style="margin-left:25px"></span>使用断言，你能“根本上测试”你的应用返回的你预期的结果。监听器，当JMeter运行时，监听器可以提供访问JMeter所收集的关于测试用例的信息。
<br><br>
<span style="margin-left:25px"></span>图像结果监听器在一个图表里绘制响应时间。查看结果树监听器具体的显示取样器的请求和响应，然后以HTML和XML格式显示出来。其它的监听器提供汇总或组合信息。而JMeter源码的基本框架如下图4.2所示，打开bin文件里的jmeter.bat就可以运行JMeter了。
<br><br>
<span style="margin-left:25px"></span>图 2.7 JMeter软件源码
<br><br>
<span style="margin-left:25px"></span>其中bin文件夹包含启动JMeter所必需的.bat、.cmd以及.sh等文件，还包含了ApacheJMeter.jar文件和一些属性文件；
<br><br>
<span style="margin-left:25px"></span> lib目录包含了 JMeter所需的所有 jar文件，其中的 ext文件夹包含了 JMeter的核心 jar包， junit文件夹存放 JUnit测试脚本，用户可以把扩展功能所使用的 jar包直接放置在 lib目录下；docs文件夹下包含了JMeter的Java Docs，printable_docs的usermanual文件夹下包含了JMeter用户使用手册的.html和pdf文件；estras目录中包含了对构建工具Ant支持的文件，用户可以使用Ant来实现测试自动化，如：批量脚本、报表的生成等。2.4.3.2JMeter工作原理及测试脚本执行流程分析
<br><br>
<span style="margin-left:25px"></span> JMeter的工作原理其实并不复杂，简单的来说，它可以被用来当作 Web服务器与浏览器这两者中间的代理网关，
<br><br>
<span style="margin-left:25px"></span>这样就可以很容易的并且准确的获取浏览器发出的请求和 Web服务器给出的响应，如此 JMeter便很容易地生成操作者想得到的性能测试脚本。之后，JMeter就可以通过线程组来模拟真实用户对Web服务器的访问压力，如图4.3所示。图 2.8 JMeter工作原理
<br><br>
<span style="margin-left:25px"></span> JMeter可以按照如下几种模式进行启动， GUI图像界面模式、服务器模式、帮助模式、版本模式、独立模式、命令模式，
<br><br>
<span style="margin-left:25px"></span>一般用户最常用的是图形界面模式，它能够提供给用户一个容易使用操作、具有良好交互性的体验。服务器模式用于分布式性能测试中。一份完整的测试计划一般都会包含如上所述的一个或者多个线程组、采样器、逻辑控制器、定时器、监听器、断言、配置元件。当点击\bin\jmeter.bat后，就会打开如图4.1所示的JMeter界面，下文对JMeter的基本操作进行介绍[20]：
<br><br>
<span style="margin-left:25px"></span>添加/删除测试元件：
<br><br>
<span style="margin-left:25px"></span>为测试计划添加测试元件，只需要在“测试计划”图标上，右键，即可在打开的目录树上选择需要的元件，如下图所示图 2.9 JMeter添加元件
<br><br>
<span style="margin-left:25px"></span>右键已经添加好的元件，在弹出的菜单中，选择“删除”既可以移除该元件；
<br><br>
<span style="margin-left:25px"></span>加载/保存测试元件：
<br><br>
<span style="margin-left:25px"></span>右键已经添加好的测试元件，选择“合并”按钮，然后从对话框中中选择外部文件，这样就可以将测试元件添加进来；同样，如果选择“另存为”既可以将元件保存为文件以供后续使用；配置测试元件：
<br><br>
<span style="margin-left:25px"></span>点击已添加的测试元件，在界面右侧用户可以设定元件的参数；保存测试计划：
<br><br>
<span style="margin-left:25px"></span>选择“文件”菜单下的“保存测试计划”或者使用快捷键ctrl+s；运行测试计划：
<br><br>
<span style="margin-left:25px"></span>选择“运行”菜单下的“启动”按钮，可以运行测试计划，界面右上角的正方形内的数值代表已经激活的线程数/总线程数；终止测试：
<br><br>
<span style="margin-left:25px"></span>可以使用停止或者关闭两个命令来终止测试；错误记录：
<br><br>
<span style="margin-left:25px"></span>JMeter可以讲警告或者错误记录在jmeter.log文件中。JMeter的测试脚本正常启动后，就可以按照.jmx脚本中以XML格式描述流程进行性能测试；
<br><br>
<span style="margin-left:25px"></span>测试结束之后，可以在监控器中查看测试的结果。JMeter脚本的执行流程如下图4.5所示[21]：图 2.10 JMeter脚本运行流程
<br><br>
<span style="margin-left:25px"></span>2.5本章小结
<br><br>
<span style="margin-left:25px"></span>本章对软件性能测试方面的内容做概述，
<br><br>
<span style="margin-left:25px"></span>主要包括软件性能测试的概念、软件性能测试的目的、软件性能测试的过程、软件测试国内外现状分析、软件性能测试方法以及软件性能测试相关工具的介绍，这样就可以对软件性能测试有个基础的了解。第3章基于web的医疗保险信息管理系统的性能测试的需求分析
<br><br>
<span style="margin-left:25px"></span>3.1基于web的医疗保险信息管理系统概述
<br><br>
<span style="margin-left:25px"></span>3.1.1web系统概述
<br><br>
<span style="margin-left:25px"></span> web软件系统是一种通过 web进行交互访问的应用，其最突出的优点是用户只需要通过浏览器既可以进行访问系统，
<br><br>
<span style="margin-left:25px"></span>而不需要再安装另外的软件，其采用的是浏览器/服务器（ B/ S）模式[22]。 web应用的系统结构如下图3.1所示，组成部分一般会有客户端、 web服务器、数据库服务器三层结构，其中客户端用于展示服务器返回的数据， web服务器用于处理客户端请求的事务，数据库服务器用于存储及管理系统中的数据。图 3.1 web系统结构
<br><br>
<span style="margin-left:25px"></span>由于每一层次之间的依赖关系比较紧密且复杂，每一层以及之间极有可能会发生故障，这样使得web系统非常需要进行软件测试尤其是性能测试。
<br><br>
<span style="margin-left:25px"></span>web应用系统与传统软件系统相比，它具有分布式、并发性、异构性、多用户等特点，这些特点对web软件测试提出了一些新的需求和挑战。这些特点主要表现在以下场景中，用户的多样性，不同的用户所使用的硬件环境、网络状况、操作系统、浏览器都不太一样，这样需要对 web应用的适用性进行测试；网页不断的多媒体化，使得应用系统的测试对象具有多样性；应用系统具有大量的用户，同一时间对 web系统并发请求的数量会非常巨大，这对系统的实时性、响应时间等性能提出了很大的考验，这就需要对其进行性能测试。 web系统的测试要比传统软件测试复杂很多，传统的软件测试技术已经不再能够胜任 web系统的测试要求，
<br><br>
<span style="margin-left:25px"></span>这对软件测试提出了新的要求，所以需要一套独特的测试方法。3.1.2基于web的医疗保险信息管理系统概述
<br><br>
<span style="margin-left:25px"></span>随着社会的发展，人们对健康越来越关注，医院和药店的业务不断增长，处理越来越复杂，简单的人工经营管理，
<br><br>
<span style="margin-left:25px"></span>已无法满足医院和药店的需要，成为医院和药店发展的瓶颈，人们对医疗相关的各项服务的要求也越来越高。传统的手工操作模式，病人帐目繁杂，病人查帐困难，职工的医疗保健系统和报销的问题出现错误现象严重且无法追踪，人工传送各种记帐单容易漏、错帐，人工划价收费差错难以避免，因此，如何提高服务水平、提高工作效率，成为迫待解决的问题。因此医疗保险信息系统恰好满足了这些需求。医疗保险信息系统（MIIS:
<br><br>
<span style="margin-left:25px"></span> Medical insurance information management system）是为了使病人获得基本的医疗保险服务，又能给医院和药店提供快速便捷的信息交互功能。这个系统涉及到的部门非常广，如参保单位、银行、税务部门、定点医疗机构、定点零售药店等，各部门的密切配合，使资源得到充分合理的利用，通过与定点医疗机构、定点零售药店建立网络连接，来实现投保人在就诊和购药时，使用医保卡就能实时支付的功能。最后通过建立计算机管理信息系统，实现医保业务处理计算机化。本系统是医院管理信息系统的子系统。在本系统中要实现的系统模块是投保人医疗保险信息系统，主要包括投保人的信息、投保药品、药店、和投保人理赔参数的设置等，达到一个提取信息的功能。另外，由于基于Web服务器的应用系统由于提供浏览器界面而无须安装，大大降低了系统部署和升级成本，得以普遍应用。目前，很多企业的核心业务系统均是Web应用，用户可以享用更丰富的功能和体验，所以，在这里研究软件测试的结合项目是基于web的投保人医疗保险信息系统。3.2系统性能测试的瓶颈与需求
<br><br>
<span style="margin-left:25px"></span>本文以实习阶段参与的测试项目为基础，即上文介绍的医疗保险信息系统，该系统拥有许多复杂的结构模块，
<br><br>
<span style="margin-left:25px"></span>由于篇幅原因，介绍整个系统各个模块的性能测试显得不切实际，也没有这个必要，所以下文选取了该系统中的定价（ Setup- Pricing）模块子系统作为研究的对象。该模块有许多的操作步骤流程，如：搜索、新建、删除等，性能测试中需要涉及到这些全部的流程，以全面测试该子系统的性能表现。在性能的各个指标中，选取了响应时间、吞吐量以及系统硬件指标参数作为研究方向，通过 JMeter测试工具和其他系统命令查看各参数的变化情况，确定系统的瓶颈缺陷，为系统调优做参考。在下文中会详细讨论各个测试，如：并发瓶颈测试、内存泄露测试等等，以及各个测试的需求和测试用例，在此不再赘述。3.3本章小结
<br><br>
<span style="margin-left:25px"></span>对基于web的医疗保险信息系统进行概述，并分析分析系统性能测试的瓶颈，并对此系统提出相应的性能测试需求。
<br><br>
<span style="margin-left:25px"></span>第4章性能测试的实施
<br><br>
<span style="margin-left:25px"></span>4.1性能测试工具的选择
<br><br>
<span style="margin-left:25px"></span>在进行软件性能测试之前，选择一款适合的性能测试工具尤为重要，工具的选择直接影响了软件测试的质量以至于软件的成功上线。
<br><br>
<span style="margin-left:25px"></span>由上文描述分析可知，现如今在软件测试行业，用于性能测试的软件工具有很多，市面上的测试软件不下一百种之多。总的来说，商业化的软件功能完备，稳定性、性能方面都比较好，适用性也比较广，但是需要花费很多的学习成本，而且一般这些软件都比较昂贵。随着开源代码/项目的兴起，也有许多开源的性能测试工具存在，其中Apache JMeter就是一看比较优秀的工具。基于web的医疗保险信息管理系统的性能测试与分析的之所以选择JMeter这个性能测试工具，本文主要考虑以下几个方面：
<br><br>
<span style="margin-left:25px"></span>（1）JMeter工具经济划算
<br><br>
<span style="margin-left:25px"></span>经济可行性分析中最重要的内容之一是成本-效益分析。
<br><br>
<span style="margin-left:25px"></span>对于本系统的性能测试选择的工具要在经济方面评价其是否合理，成本-效益分析要估计出系统性能测试过程中的花费并与收益衡量比较。由于 JMeter是开源软件，测试工具成本可忽略不计，并且它可以消除手动测试那种既耗时又单调，而且需要投入大量的人力资源的问题，使用 JMeter能达到预期的效益，所以本系统进行性能测试选择 JMeter这个工具，在经济上是可行的。（2）JMeter工具可用性和易用性
<br><br>
<span style="margin-left:25px"></span>在这里要考虑JMeter这个性能测试工具是不是支持所要测试的系统。
<br><br>
<span style="margin-left:25px"></span>一般要考虑该系统是基于什么协议，用的是什么编程技术，是基于什么样的平台等等。本系统是基于HTTP协议，采用JAVA编程技术，基于windows平台，而且是B/S系统。这样看来，这个JMeter工具在本系统中是可以使用的。并且，JMeter性能测试工具操作便捷，对于测试人员来说，在较短的时间内就可以进行熟练的操作。JMeter性能测试工具除了以上优点外，还具有非常友好的显示界面，并且能够对服务器端的相关应用程序进行脚本的定制录制，然后进行测试。基于以上分析结果，本系统性能测试工具选择JMeter，能够很好的满足本系统的性能测试要求。
<br><br>
<span style="margin-left:25px"></span>4.2web系统性能测试平台
<br><br>
<span style="margin-left:25px"></span>Apache JMeter是Apache开发的基于Java的开源性能测试工具，它能够模拟巨大的负载对服务器、网络进行强度测试分析它们的性能。
<br><br>
<span style="margin-left:25px"></span>JMeter不仅能够测试静态资源还可以测试动态资源，而且还可以通过创建带有断言的脚本进行回归测试。它的工具包包含四个部分，分别为：负载发生器、用户运行器、资源生成器、报表生成器。JMeter工具在性能测试方面有着许多的优点：添加测试用例，不用依赖于界面，只要服务启动起来，就能设置传递参数；通过Badboy录制生成测试脚本，不需要编程，而且脚本的维护也很方便；可以直接与后台程序交互，而无需通过前台页面；断言功能，可以验证代码结果是否与期望值相符合；使用参数化以及内置函数来添加修改测试数据。关于JMeter测试工具的具体体系架构和工作原理，在上文中已经介绍过，此处不再赘述。
<br><br>
<span style="margin-left:25px"></span>4.3性能测试的实施
<br><br>
<span style="margin-left:25px"></span>4.3.1测试方案制定
<br><br>
<span style="margin-left:25px"></span>4.3.1.1测试目标
<br><br>
<span style="margin-left:25px"></span>系统性能测试的主要目标包括以下两个方面：
<br><br>
<span style="margin-left:25px"></span>验证系统性能能否满足验收的标准；
<br><br>
<span style="margin-left:25px"></span>识别并确保相关性能的缺陷在系统部署之前能够解决。
<br><br>
<span style="margin-left:25px"></span>4.3.1.2性能验收标准
<br><br>
<span style="margin-left:25px"></span>性能的指标总是有两套标准。
<br><br>
<span style="margin-left:25px"></span>第一个是性能标准（包括要求和目标）；第二个是参与完成标准。在下面的章节中，本文采用两种类型的标准来解释定价子系统（Setup-Pricing）性能测试工作。当所有的性能标准或任何一个参与完成的标准得到满足，那么就可以说已经达到了性能的要求。性能标准可以具体被分为被测系统的性能要求和目标。
<br><br>
<span style="margin-left:25px"></span>优先的性能测试工作的结果是验证应用程序满足目前所有这些目标和需求。下文具体说明这些指标：性能测试要求
<br><br>
<span style="margin-left:25px"></span>性能要求既是只有满足这些条件，应用系统才能上线，成为一个生产系统。
<br><br>
<span style="margin-left:25px"></span>目前项目组对系统的性能测试没有设定一般的性能要求。所以本文也就不再进行描述。性能测试目标
<br><br>
<span style="margin-left:25px"></span>目标既是期望应用程序能够达到的标准，它不同于前文所说的要求。
<br><br>
<span style="margin-left:25px"></span>测试将会一直继续下去，直到满足了所有的目标或者时间/金钱已经耗尽时，也已经达到要求。一般的目标是以下三个方面：
<br><br>
<span style="margin-left:25px"></span>评估定价（Setup-Pricing）子系统的响应时间；
<br><br>
<span style="margin-left:25px"></span>评估定价子系统的吞吐量；
<br><br>
<span style="margin-left:25px"></span>评估定价子系统的性能。
<br><br>
<span style="margin-left:25px"></span>针对定价子系统，并没有特别目标的测试需求，所以性能测试工作只是用来评估系统的性能。
<br><br>
<span style="margin-left:25px"></span>4.3.1.3参与完成标准
<br><br>
<span style="margin-left:25px"></span>因为一些性能测试团队无法控制的情况，性能测试的需求以及目标都不能达到时，性能测试将会在以下情况下被认为是有效的：
<br><br>
<span style="margin-left:25px"></span>所有阻止应用程序实现性能指标的瓶颈都确定在团队的控制之外；
<br><br>
<span style="margin-left:25px"></span>达到了预先设定的结束日期；
<br><br>
<span style="margin-left:25px"></span>尽管一些性能要求或者目标没有实现，但是团队一致认为应用程序执行效率是可以接受的。
<br><br>
<span style="margin-left:25px"></span>4.3.2测试环境设计
<br><br>
<span style="margin-left:25px"></span>本节描述了定价子系统的生产环境和测试环境，采用不同的基础设备，通过搭建与外部网络隔离的测试环境，来衡量所开发系统的性能。
<br><br>
<span style="margin-left:25px"></span>4.3.2.1开发环境
<br><br>
<span style="margin-left:25px"></span>定价（Setup-Pricing）子系统包含两个服务器实例：
<br><br>
<span style="margin-left:25px"></span>web服务器和数据库服务器。目前，生产环境还没有确定，开发环境可能作为未来构建生产环境的一个重要参考。所以测试一个与开发环境及其相似的测试环境能够部分预测开发环境和潜在的生产环境的性能。开发环境的详细信息如下所示：
<br><br>
<span style="margin-left:25px"></span>a）20*CPUs（PowerPC_Power7），CPU时钟频率：
<br><br>
<span style="margin-left:25px"></span>3300MHz，内存：16GB；b）操作系统：
<br><br>
<span style="margin-left:25px"></span>AIX 7.1.1.16 TL00；c）WebSphere Application Server - ND， 7.0；
<br><br>
<span style="margin-left:25px"></span>d）DB2版本：
<br><br>
<span style="margin-left:25px"></span>10.1。图 4.1 定价子系统开发环境的逻辑视图
<br><br>
<span style="margin-left:25px"></span>图 4.2 定价子系统开发环境的物理视图
<br><br>
<span style="margin-left:25px"></span>4.3.2.2测试环境
<br><br>
<span style="margin-left:25px"></span>本节的重点是定价子系统测试环境的搭建。
<br><br>
<span style="margin-left:25px"></span>下图显示了测试环境的逻辑视图和物理视图，由此可见测试环境与开发环境存在一定的差异。所以，从这种开发环境中搜集的性能测试数据与真正的开发环境和生产环境所产生的测试数据没有绝对的联系，然而这些数据可以预测定价应用的性能。测试环境与开发环境主要的不同点如下所示：
<br><br>
<span style="margin-left:25px"></span>客户端，测试环境中的web服务器和数据库服务器都是部署在公司内部网络中，而不是项目组内部网络的生产环境中；
<br><br>
<span style="margin-left:25px"></span>在测试环境中，所有的web应用程序和EJB都是部署在单个机器上的而不是生产环境中的集群上。
<br><br>
<span style="margin-left:25px"></span>图 4.3 定价子系统测试环境逻辑视图
<br><br>
<span style="margin-left:25px"></span>测试环境的具体信息如下所示：
<br><br>
<span style="margin-left:25px"></span>a）Intel(R) Xeon(R) CPU E5645 2.40GHz，内存：
<br><br>
<span style="margin-left:25px"></span>16GB；b）Red Hat 4.1.2-48（ Linux 2.6.18-194.el5）；
<br><br>
<span style="margin-left:25px"></span>c）WebSphere Application Server - ND， 7.0；
<br><br>
<span style="margin-left:25px"></span>d）DB2版本：
<br><br>
<span style="margin-left:25px"></span>10.1。图 4.4 定价子系统测试环境的物理视图
<br><br>
<span style="margin-left:25px"></span>4.3.3测试场景设计
<br><br>
<span style="margin-left:25px"></span>4.3.3.1定价子系统数据源
<br><br>
<span style="margin-left:25px"></span>本节详细描述了被测系统的数据管理，性能测试所需的数据可以分为两种类型：
<br><br>
<span style="margin-left:25px"></span>测试中需要参数化的动态数据；
<br><br>
<span style="margin-left:25px"></span>目标系统中的数据，通常包括数据库或者文件服务器中的数据。
<br><br>
<span style="margin-left:25px"></span>其中，动态数据通常被描述在特定目标的工作负载特征部分。
<br><br>
<span style="margin-left:25px"></span>经验表明，系统数据库中的数据量通常会很大程度地影响系统的性能。
<br><br>
<span style="margin-left:25px"></span>所以，所以本文需要基于规划、营销、估计，来模拟这个定价子系统潜在的数据环境。为了模拟定价子系统的数据量，需要按照定价子系统数据库设计，来生成插入数据。下文将会介绍，生成不同数据量来检查对系统性能的不同影响。详细的数据量将会在测试期间进行启发式的设定。主要的表结构如下所示：
<br><br>
<span style="margin-left:25px"></span>表4.1 COMPONENT Table
<br><br>
<span style="margin-left:25px"></span>表名
<br><br>
<span style="margin-left:25px"></span>T08
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>Pricing Option Component
<br><br>
<span style="margin-left:25px"></span>主键
<br><br>
<span style="margin-left:25px"></span>外键
<br><br>
<span style="margin-left:25px"></span>逻辑表名
<br><br>
<span style="margin-left:25px"></span>物理表名
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>大小
<br><br>
<span style="margin-left:25px"></span>NULL
<br><br>
<span style="margin-left:25px"></span>外键
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_ID
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>LAST_MNT_TS
<br><br>
<span style="margin-left:25px"></span>LAST_MNT_TS
<br><br>
<span style="margin-left:25px"></span>TIMESTAMP
<br><br>
<span style="margin-left:25px"></span>26
<br><br>
<span style="margin-left:25px"></span>LAST_MNT_OPID
<br><br>
<span style="margin-left:25px"></span>LAST_MNT_OPID
<br><br>
<span style="margin-left:25px"></span>CHAR
<br><br>
<span style="margin-left:25px"></span>CUSTOMER_SET_ID
<br><br>
<span style="margin-left:25px"></span>CUSTOMER_SET_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>EVENT_ID
<br><br>
<span style="margin-left:25px"></span>EVENT_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>13
<br><br>
<span style="margin-left:25px"></span>TRACK USER OPERATION
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_SHT_NM
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_SHT_NM
<br><br>
<span style="margin-left:25px"></span>CHAR
<br><br>
<span style="margin-left:25px"></span>10
<br><br>
<span style="margin-left:25px"></span>COVERAGE_
<br><br>
<span style="margin-left:25px"></span>CMPONT_STATUS_CD
<br><br>
<span style="margin-left:25px"></span>COVERAGE_
<br><br>
<span style="margin-left:25px"></span>CMPONT_STATUS_CD
<br><br>
<span style="margin-left:25px"></span>CHAR
<br><br>
<span style="margin-left:25px"></span>COMPONENT_TYPE_ID
<br><br>
<span style="margin-left:25px"></span>COMPONENT_TYPE_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>表4.2 EFFECTIVE DATE RANGE Table
<br><br>
<span style="margin-left:25px"></span>表名
<br><br>
<span style="margin-left:25px"></span>S95
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>Date Range
<br><br>
<span style="margin-left:25px"></span>主键
<br><br>
<span style="margin-left:25px"></span>外键
<br><br>
<span style="margin-left:25px"></span>逻辑表名
<br><br>
<span style="margin-left:25px"></span>物理表名
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>大小
<br><br>
<span style="margin-left:25px"></span>NULL
<br><br>
<span style="margin-left:25px"></span>外键
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_
<br><br>
<span style="margin-left:25px"></span>ID
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_
<br><br>
<span style="margin-left:25px"></span>ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>T08.
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_ID
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_
<br><br>
<span style="margin-left:25px"></span>DTL_ID
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_
<br><br>
<span style="margin-left:25px"></span>DTL_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_
<br><br>
<span style="margin-left:25px"></span>EFFV_DT
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_
<br><br>
<span style="margin-left:25px"></span>EFFV_DT
<br><br>
<span style="margin-left:25px"></span>DATE
<br><br>
<span style="margin-left:25px"></span>10
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_
<br><br>
<span style="margin-left:25px"></span>TERMTN_DT
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_
<br><br>
<span style="margin-left:25px"></span>TERMTN_DT
<br><br>
<span style="margin-left:25px"></span>DATE
<br><br>
<span style="margin-left:25px"></span>10
<br><br>
<span style="margin-left:25px"></span>表4.3 SECTION COST DETERMINATION Table
<br><br>
<span style="margin-left:25px"></span>表名
<br><br>
<span style="margin-left:25px"></span>partition
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>Pricing Option Component
<br><br>
<span style="margin-left:25px"></span>主键
<br><br>
<span style="margin-left:25px"></span>外键
<br><br>
<span style="margin-left:25px"></span>逻辑表名
<br><br>
<span style="margin-left:25px"></span>物理表名
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>大小
<br><br>
<span style="margin-left:25px"></span>NULL
<br><br>
<span style="margin-left:25px"></span>外键
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_
<br><br>
<span style="margin-left:25px"></span>DTL_ID
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_
<br><br>
<span style="margin-left:25px"></span>DTL_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>S95.
<br><br>
<span style="margin-left:25px"></span> PRICING_COMPONENT_
<br><br>
<span style="margin-left:25px"></span>DTL_ID
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_ID
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>T08.
<br><br>
<span style="margin-left:25px"></span> PRICING_COMPONENT_ID
<br><br>
<span style="margin-left:25px"></span>COST_
<br><br>
<span style="margin-left:25px"></span>DETERMINATION_
<br><br>
<span style="margin-left:25px"></span>ID
<br><br>
<span style="margin-left:25px"></span>COST_
<br><br>
<span style="margin-left:25px"></span>DETERMINATION_
<br><br>
<span style="margin-left:25px"></span>ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>CONDITION_ID
<br><br>
<span style="margin-left:25px"></span>CONDITION_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>O42.CONDITION_ID
<br><br>
<span style="margin-left:25px"></span>CONDITION_
<br><br>
<span style="margin-left:25px"></span>SEQUENCE_ID
<br><br>
<span style="margin-left:25px"></span>CONDITION_
<br><br>
<span style="margin-left:25px"></span>SEQUENCE_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>O42.
<br><br>
<span style="margin-left:25px"></span> CONDITION_SEQUENCE_ID
<br><br>
<span style="margin-left:25px"></span>CONDITION_MET_CD
<br><br>
<span style="margin-left:25px"></span>CONDITION_MET_CD
<br><br>
<span style="margin-left:25px"></span>CHAR
<br><br>
<span style="margin-left:25px"></span>表4.4 SECTION PAYMENT Table
<br><br>
<span style="margin-left:25px"></span>表名
<br><br>
<span style="margin-left:25px"></span>S99
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>PAYMENT STATISFACTION
<br><br>
<span style="margin-left:25px"></span>主键
<br><br>
<span style="margin-left:25px"></span>外键
<br><br>
<span style="margin-left:25px"></span>逻辑表名
<br><br>
<span style="margin-left:25px"></span>物理表名
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>大小
<br><br>
<span style="margin-left:25px"></span>NULL
<br><br>
<span style="margin-left:25px"></span>FK
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_DTL_ID
<br><br>
<span style="margin-left:25px"></span>PRICING_
<br><br>
<span style="margin-left:25px"></span>COMPONENT_DTL_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>S95.
<br><br>
<span style="margin-left:25px"></span> PRICING_COMPONENT_DTL_IDPRICING_COMPONENT_ID
<br><br>
<span style="margin-left:25px"></span>PRICING_COMPONENT_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>T08.
<br><br>
<span style="margin-left:25px"></span> PRICING_COMPONENT_IDSATISFACTION_OPTION_ID
<br><br>
<span style="margin-left:25px"></span>SATISFACTION_OPTION_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>CONDITION_ID
<br><br>
<span style="margin-left:25px"></span>CONDITION_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>O42.CONDITION_ID
<br><br>
<span style="margin-left:25px"></span>CONDITION_SEQUENCE_ID
<br><br>
<span style="margin-left:25px"></span>CONDITION_SEQUENCE_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>O42.
<br><br>
<span style="margin-left:25px"></span> CONDITION_SEQUENCE_IDCONDITION_MET_CD
<br><br>
<span style="margin-left:25px"></span>CONDITION_MET_CD
<br><br>
<span style="margin-left:25px"></span>CHAR
<br><br>
<span style="margin-left:25px"></span>PRIORITY_ID
<br><br>
<span style="margin-left:25px"></span>PRIORITY_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>表4.5 STATISFACTION OPTION Table
<br><br>
<span style="margin-left:25px"></span>表名
<br><br>
<span style="margin-left:25px"></span>S98
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>STATISFACTION OPTION
<br><br>
<span style="margin-left:25px"></span>主键
<br><br>
<span style="margin-left:25px"></span>外键
<br><br>
<span style="margin-left:25px"></span>逻辑表名
<br><br>
<span style="margin-left:25px"></span>物理表名
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>大小
<br><br>
<span style="margin-left:25px"></span>NULL
<br><br>
<span style="margin-left:25px"></span>外键
<br><br>
<span style="margin-left:25px"></span>描述
<br><br>
<span style="margin-left:25px"></span>PRICING_COMPONENT_DTL_ID
<br><br>
<span style="margin-left:25px"></span>PRICING_COMPONENT_DTL_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>S95.
<br><br>
<span style="margin-left:25px"></span> PRICING_COMPONENT_DTL_IDPRICING_COMPONENT_ID
<br><br>
<span style="margin-left:25px"></span>PRICING_COMPONENT_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>T08.
<br><br>
<span style="margin-left:25px"></span> PRICING_COMPONENT_IDSATISFACTION_OPTION_ID
<br><br>
<span style="margin-left:25px"></span>SATISFACTION_OPTION_ID
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>S99.
<br><br>
<span style="margin-left:25px"></span> SATISFACTION_OPTION_IDSATISFACTION_OPTION_TYPE_CD
<br><br>
<span style="margin-left:25px"></span>SATISFACTION_OPTION_TYPE_CD
<br><br>
<span style="margin-left:25px"></span>CHAR
<br><br>
<span style="margin-left:25px"></span>SATISFACTION_OPTION_NM
<br><br>
<span style="margin-left:25px"></span>SATISFACTION_OPTION_NM
<br><br>
<span style="margin-left:25px"></span>CHAR
<br><br>
<span style="margin-left:25px"></span>ORDER_OF_PRECEDENCE_CT
<br><br>
<span style="margin-left:25px"></span>ORDER_OF_PRECEDENCE_CT
<br><br>
<span style="margin-left:25px"></span>DECIMAL
<br><br>
<span style="margin-left:25px"></span>以上五张表都是与定价相关的表，用户网页登陆的性能将会与这些表有很大的关联。
<br><br>
<span style="margin-left:25px"></span>这五张表是定价子系统的主要的表，相比于其他的表，它们会有很高的读写频率。五张表的E-R图如下所示：图 4.5 定价子系统表之间E-R图
<br><br>
<span style="margin-left:25px"></span>4.3.3.2响应时间评估
<br><br>
<span style="margin-left:25px"></span>响应时间是一个web应用程序的一个重要指标。
<br><br>
<span style="margin-left:25px"></span>定价子系统是一个基于B/S的医疗价格管理系统的一个模块。该子系统性能测试中响应时间的目标是：
<br><br>
<span style="margin-left:25px"></span>在不同负载下评估平均响应时间取决于场景的重要性。
<br><br>
<span style="margin-left:25px"></span>有三个级别的访问频率：高水平、中等水平和低水平。a）高水平：
<br><br>
<span style="margin-left:25px"></span>50个峰值用户连接的访问概率为70%b）中等水平：
<br><br>
<span style="margin-left:25px"></span>20个峰值用户连接的访问概率为20%c）低水平：
<br><br>
<span style="margin-left:25px"></span>10个峰值用户连接的访问概率为10%用于搜集平均响应时间的页面的最小测试次数必须大于20。
<br><br>
<span style="margin-left:25px"></span>（1）理论
<br><br>
<span style="margin-left:25px"></span>请求的响应时间是用户向服务器发送一个HTTP请求和服务器返回的HTTP响应之间的时间间隔。
<br><br>
<span style="margin-left:25px"></span>这个过程包括域名解析，建立HTTP连接和数据传输。下图简要描述了一个HTTP请求的过程。计算响应时间可约表示如下：请求的响应时间=T1+T2+T3+T4
<br><br>
<span style="margin-left:25px"></span>图 4.6 请求的响应时间
<br><br>
<span style="margin-left:25px"></span>web页面的响应时间是发送第一个HTTP请求的开始和收到最后一个HTTP请求的结束之间的时间间隔。
<br><br>
<span style="margin-left:25px"></span>以下指标可以用来全面显示响应时间：
<br><br>
<span style="margin-left:25px"></span>算术平均：
<br><br>
<span style="margin-left:25px"></span>一组数值的算术平均数；百分比：
<br><br>
<span style="margin-left:25px"></span>一个变量的值，指的是观测值的一定百分比，这个指数将被这样使用，如：“95%的响应时间小于100ms”中位数：
<br><br>
<span style="margin-left:25px"></span>数量位于中间的一组值；正常的值：
<br><br>
<span style="margin-left:25px"></span>一组值中，出现最频繁的值标；准偏差：
<br><br>
<span style="margin-left:25px"></span>显示有变化程度或与平均水平的“分散”程度，它用来测量给定数据集的稳定性。理论上，可以从不同的角度得到的响应时间序列和上面列出的计算统计信息，分析测试结果。
<br><br>
<span style="margin-left:25px"></span>额外的指标应该从服务器收集，以帮助确定负载级别，系统瓶颈，系统状态和运行的测试：CPU使用率、RAM的使用、SWAP使用、IO速度、网络速度。这些统计数据，例如平均、百分数、中位数、正常值和标准偏差，可以用来显示系统动态的不同方面。（2）工作负载特征
<br><br>
<span style="margin-left:25px"></span>以下部分将描述工作负载模型用于评估定价系统的性能。
<br><br>
<span style="margin-left:25px"></span>工作负载分布的估计由团队完成。因为缺乏系统日志，所以不能得到真正的分布信息。图 4.7 定价系统工作负载模型概况
<br><br>
<span style="margin-left:25px"></span>系统中有八个主要的业务场景：
<br><br>
<span style="margin-left:25px"></span>定价应用程序→“定价”主页→搜索
<br><br>
<span style="margin-left:25px"></span>定价应用程序→“定价”主页→新建
<br><br>
<span style="margin-left:25px"></span>定价应用程序→输入→搜索
<br><br>
<span style="margin-left:25px"></span>定价应用程序→输入→新建
<br><br>
<span style="margin-left:25px"></span>定价应用程序→报告→组件的全部细节
<br><br>
<span style="margin-left:25px"></span>定价应用程序→报告→组件的概况
<br><br>
<span style="margin-left:25px"></span>定价应用程序→报告→比较组件
<br><br>
<span style="margin-left:25px"></span>定价应用程序→报告→关联报告
<br><br>
<span style="margin-left:25px"></span>（3）解决方案
<br><br>
<span style="margin-left:25px"></span>本节将描述被推荐的定价系统性能测试方法。
<br><br>
<span style="margin-left:25px"></span>根据工作负载分布和工作流，本文将所有可能的路径转换成连续的过程，每个过程将与某一个概率有关。一个过程中的并行虚拟用户数量将为：VUs*P，其中VU表示虚拟用户的总数模拟过程中，P代表一个特定过程的可能性。在不同的VU下，随着并发用户的增加，测试该系统来提取出响应时间的趋势（请求和web页面）。（4）测试用例
<br><br>
<span style="margin-left:25px"></span>在本节中将详细描述定价子系统的所有测试用例。
<br><br>
<span style="margin-left:25px"></span>考虑到篇幅，本文将不描述参数化的表。下图包含所有在性能测试中涉及的将被执行的顺序工作流。图 4.8 定价主页搜索程序的测试用例
<br><br>
<span style="margin-left:25px"></span>子工作流：
<br><br>
<span style="margin-left:25px"></span>定价应用系统→定价主页→搜索图 4.9 定价系统主页新建测试用例
<br><br>
<span style="margin-left:25px"></span>子工作流程：
<br><br>
<span style="margin-left:25px"></span>定价应用→定价主页→新建图 4.10 含有搜索的输入程序的测试用例
<br><br>
<span style="margin-left:25px"></span>子工作流：
<br><br>
<span style="margin-left:25px"></span>定价应用系统→输入→搜索图 4.11 含有新建的输入程序的测试用例
<br><br>
<span style="margin-left:25px"></span>子工作流：
<br><br>
<span style="margin-left:25px"></span>定价应用系统→输入→新建图 4.12 报告程序的测试用例
<br><br>
<span style="margin-left:25px"></span>子工作流：
<br><br>
<span style="margin-left:25px"></span>定价应用程序→报告4.3.3.3吞吐量评估
<br><br>
<span style="margin-left:25px"></span>系统吞吐量是在一个单位时间内，由服务器处理的工作负载单元的总数，它是系统效率的一个重要指标。
<br><br>
<span style="margin-left:25px"></span>许多因素可能会影响系统吞吐量，如负载、软件架构、硬件和系统配置。（1）理论
<br><br>
<span style="margin-left:25px"></span>吞吐量是指在一个单位时间内，业务系统提供的服务数量。
<br><br>
<span style="margin-left:25px"></span>吞吐量通常是系统及其组件处理传输数据请求的能力的总体评价。web应用程序系统的吞吐量通常以每秒请求数或页面数来衡量。理论上，可以得到请求序列以及能够计算出时间序列内窗口的吞吐量。额外的指标应该从服务器收集，以帮助确定负载级别，系统瓶颈，系统状态和运行的测试，如：CPU使用率、RAM的使用、SWAP使用、IO速度、网络速度。所有这些数据可以组合来分析系统的性能。（2）工作负载特征
<br><br>
<span style="margin-left:25px"></span>因为在评估测试系统响应时间时，吞吐量就可以计算出来，因此，工作负载特性与上文是相同的部分。
<br><br>
<span style="margin-left:25px"></span>（3）解决方案
<br><br>
<span style="margin-left:25px"></span>本节将描述测量定价系统吞吐量的推荐方法。
<br><br>
<span style="margin-left:25px"></span>根据工作负载分布和工作流，本文将所有可能的路径转换成连续的过程，每个过程将与某一个概率有关。一个过程中的并行虚拟用户数量将为：VUs*P，其中VU表示虚拟用户的总数模拟过程中，P代表一个特定过程的可能性。本文将在不同的负载级别下测量系统吞吐量来预测系统的处理能力。（4）测试用例
<br><br>
<span style="margin-left:25px"></span>与上文相同，此处不再赘述。
<br><br>
<span style="margin-left:25px"></span>4.3.4测试场景执行
<br><br>
<span style="margin-left:25px"></span>定价应用程序的性能测试从2014-09-23开始一直持续到了2014-11-23。
<br><br>
<span style="margin-left:25px"></span>性能测试的具体执行参见第五章。4.3.5测试结果
<br><br>
<span style="margin-left:25px"></span>测试结果分析参见第五章。
<br><br>
<span style="margin-left:25px"></span>4.4本章小结
<br><br>
<span style="margin-left:25px"></span>主要讲性能测试的实施，其中包括性能测试工具的选择、性能测试的平台选择、测试方案的制定、测试环境设计、测试场景设计、测试场景的执行等。
<br><br>
<span style="margin-left:25px"></span>第5章性能测试的结果及分析
<br><br>
<span style="margin-left:25px"></span>5.1测试执行概况
<br><br>
<span style="margin-left:25px"></span>定价应用程序的性能测试开始从2014-09-23到2014-11-23。
<br><br>
<span style="margin-left:25px"></span>这个测试的目的是评估定价应用程序的性能，以及帮助团队找到潜在的性能相关的瓶颈和错误。本文将采用启发式方法，应用JMeter来执行测试用例来评估关键场景的响应时间和吞吐量。JMeter的总结报告是用于记录的最大响应时间、平均响应时间、最小响应。性能测试工作可以彻底揭示定价的应用程序的质量，在生产之前减少潜在风险。以下部分将简要描述重要的测试场景，包括测试策略、测试目的、测试结果、监测数据和结论。根据测试数据、监测数据、性能分析和调优，从中得出结论并进行分析。5.2执行结果
<br><br>
<span style="margin-left:25px"></span>基于应用程序，按照不同的类别区分测试策略，每个类别有不同的测试目标和不同的输出。
<br><br>
<span style="margin-left:25px"></span>5.2.1执行摘要
<br><br>
<span style="margin-left:25px"></span>5.2.1.1重要的观测结果
<br><br>
<span style="margin-left:25px"></span>在本节中将给出重要的统计数据和观测。
<br><br>
<span style="margin-left:25px"></span>详细的测试数据将在下文中进行描述。以下是关键的观察：（1）下面的饼图显示所有测试网页或动作的响应时间的排名比例。
<br><br>
<span style="margin-left:25px"></span>本文模拟1vu、5vu、10vu、15vu和20vu分别访问Argus系统。每个线程将在前一个线程开始8秒钟后才开始执行。每一个虚拟用户执行测试10次。每个操作之间的思考时间是0.3秒，响应时间一般分为五种类型，如下：优秀Excellent（(1s）、好Good（1s-2s），可接受Acceptable（2s-5s），持平Fair（5s-10s）、差Poor（)10）。图 5.1 不同的虚拟用户数情况下，响应时间比例
<br><br>
<span style="margin-left:25px"></span>图 5.2 虚拟用户数-响应时间比例趋势图
<br><br>
<span style="margin-left:25px"></span>由上图可以看到，差Poor和持平Fair的比例最大，而优秀Excellent的比例最小，总是占不到5%。
<br><br>
<span style="margin-left:25px"></span>必须指出，当虚拟用户超过10时，差和持平总是超过50%，也需要注意，可接受Acceptable的比例总是两倍于好Good的比例。（2）在不同的测试负载下运行所有的测试用例后，发现系统总是花费太多的时间与数据库进行交互。
<br><br>
<span style="margin-left:25px"></span>例如：当点击保存、编辑或细节按钮时，响应时间总是太高于其他动作。（3）测试在20个虚拟用户情况下，CPU的使用使用情况，如下图所示：
<br><br>
<span style="margin-left:25px"></span>图 5.3 20个虚拟用户情况下，CPU使用情况
<br><br>
<span style="margin-left:25px"></span>us（user CPU）：
<br><br>
<span style="margin-left:25px"></span>为用户任务服务的CPU数量。sy（system CPU）：
<br><br>
<span style="margin-left:25px"></span>为系统任务服务的CPU数量百分比。需要指出的是，所有的CPU度量均表示为百分数。
<br><br>
<span style="margin-left:25px"></span>在20虚拟用户访问定价模块子系统的情况下，CPU值（us + sy）总和达到了90%。由于测试环境通常也是开发环境，其他一些项目将会产生许多处理流程与该模块一起运行，这个测试的准确性会受到这些因素的影响。（4）子系统的平均响应时间，如下图所示：
<br><br>
<span style="margin-left:25px"></span>图 5.4 系统平均响应时间
<br><br>
<span style="margin-left:25px"></span>由JMeter记录的响应时间应该是服务器响应时间（Ts）和网络响应时间（Tn）的总和。
<br><br>
<span style="margin-left:25px"></span>本文每10秒持续地ping系统服务器，系统的平均响应时间是292ms。上面的曲线图显示，在开始时间内，平均响应时间增长迅速增长并在很短的时间到达最高点。然后该趋势趋于减少，保持在4900ms的稳定值。有三个原因将导致上述现象：在初始阶段，系统包含性能不足，这个需要在未来进行优化。
<br><br>
<span style="margin-left:25px"></span>例如，它总是花费太多的时间进行数据库查询；系统使用缓存机制，它不是一个性能不足；
<br><br>
<span style="margin-left:25px"></span>固有的现象是由于系统架构设计引起的。
<br><br>
<span style="margin-left:25px"></span>例如，系统不会建立应用程序服务器和数据库之间的连接直到收到第一个请求，在随后的阶段该连接不会被释放。在与系统架构、开发人员和最终用户确认之前，该现象不能被定义为一个性能不足。5.2.1.2重要的结论
<br><br>
<span style="margin-left:25px"></span>由以上分析可以得出以下的结论：
<br><br>
<span style="margin-left:25px"></span>（1）从这些饼图可以清楚地得出结论，当虚拟用户超过10时，整个系统性能不太好；
<br><br>
<span style="margin-left:25px"></span>（2）系统总是花费太多的时间与数据库进行交互，这个是由高CPU使用率引起的。
<br><br>
<span style="margin-left:25px"></span>（3）最耗时的前十大性能动作行为，如下表所示：
<br><br>
<span style="margin-left:25px"></span>表5.1 最耗时的前十个行为动作
<br><br>
<span style="margin-left:25px"></span>最耗时的前十大行为动作
<br><br>
<span style="margin-left:25px"></span>平均相应时间（ms）
<br><br>
<span style="margin-left:25px"></span>New Client Pricing Rate Sheet/Pricing Options
<br><br>
<span style="margin-left:25px"></span>65818
<br><br>
<span style="margin-left:25px"></span>Pricing Home-Search-Client Pricing Options/MIC Options
<br><br>
<span style="margin-left:25px"></span>64424
<br><br>
<span style="margin-left:25px"></span>Pricing Home-Update Tags/Notes
<br><br>
<span style="margin-left:25px"></span>64169
<br><br>
<span style="margin-left:25px"></span>Pricing Application-Import-Search
<br><br>
<span style="margin-left:25px"></span>60572
<br><br>
<span style="margin-left:25px"></span>Pricing Home- Search-Client Pricing Rate sheet-Update-Detail
<br><br>
<span style="margin-left:25px"></span>59673
<br><br>
<span style="margin-left:25px"></span>Pricing Application-Import-New
<br><br>
<span style="margin-left:25px"></span>49133
<br><br>
<span style="margin-left:25px"></span>New a Priority to the table-Network Rate section-New a Priority to the table
<br><br>
<span style="margin-left:25px"></span>42095
<br><br>
<span style="margin-left:25px"></span>Pricing Home-Update Tags/Notes tab-search
<br><br>
<span style="margin-left:25px"></span>36998
<br><br>
<span style="margin-left:25px"></span>Pricing Home-Update Tags/Notes tab-Detail
<br><br>
<span style="margin-left:25px"></span>33540
<br><br>
<span style="margin-left:25px"></span>Create- Client Pricing Rate Sheet-click-next1-button
<br><br>
<span style="margin-left:25px"></span>28682
<br><br>
<span style="margin-left:25px"></span>5.2.2并发瓶颈测试
<br><br>
<span style="margin-left:25px"></span>5.2.2.1并发瓶颈测试策略
<br><br>
<span style="margin-left:25px"></span>在线程组，分别为不同用户设置参数值，为每个用户设置主见增加的足够时间来完成登录过程，并设置循环次数。
<br><br>
<span style="margin-left:25px"></span>对于每一个测试计划，执行多次来提高准确性。设置用例包括：确定可能性的所有操作来测试系统的总体性能。如：web容器池大小=100，模拟1vu，20vu，50vu，100vu和200vu分别访问系统。所有线程将在5秒（如果改时间太小，在测试结果，发现并发压力发生在登录过程）。每一个虚拟用户应该执行测试1次。每个操作之间的思考时间是0.3秒。在该测试用例中，只测试POC段的定价选择搜索功能的性能（BS：运行所有操作需要超过1PC）。users=1，loop=1
<br><br>
<span style="margin-left:25px"></span>users=20，loop=1
<br><br>
<span style="margin-left:25px"></span>users=50，loop=1
<br><br>
<span style="margin-left:25px"></span>users=100，loop=1
<br><br>
<span style="margin-left:25px"></span>users=200，loop=1
<br><br>
<span style="margin-left:25px"></span>5.2.2.2并发瓶颈测试目标
<br><br>
<span style="margin-left:25px"></span>该线程组模拟不同用户对服务器执行一个特定的测试用例。
<br><br>
<span style="margin-left:25px"></span>它的目标是该系统在不同的并发量下的性能。测试被用于在高并发下测试系统瓶颈，包括：CPU压力，内存压力，EJB/WEB线程池压力，DB2连接池压力。5.2.2.3并发瓶颈测试结果
<br><br>
<span style="margin-left:25px"></span>（1）平均时间
<br><br>
<span style="margin-left:25px"></span>表5.2 并发瓶颈测试响应时间
<br><br>
<span style="margin-left:25px"></span>测试时间
<br><br>
<span style="margin-left:25px"></span>2014.11.14
<br><br>
<span style="margin-left:25px"></span>用例
<br><br>
<span style="margin-left:25px"></span>Pricing Option-View
<br><br>
<span style="margin-left:25px"></span>web池大小
<br><br>
<span style="margin-left:25px"></span>100
<br><br>
<span style="margin-left:25px"></span>JMeter位置
<br><br>
<span style="margin-left:25px"></span>Local/ZDEV
<br><br>
<span style="margin-left:25px"></span>用户数
<br><br>
<span style="margin-left:25px"></span>循环次数
<br><br>
<span style="margin-left:25px"></span>ramp-up（秒）
<br><br>
<span style="margin-left:25px"></span>平均时间（秒）
<br><br>
<span style="margin-left:25px"></span>2.7
<br><br>
<span style="margin-left:25px"></span>20
<br><br>
<span style="margin-left:25px"></span>17
<br><br>
<span style="margin-left:25px"></span>50
<br><br>
<span style="margin-left:25px"></span>20
<br><br>
<span style="margin-left:25px"></span>100
<br><br>
<span style="margin-left:25px"></span>74
<br><br>
<span style="margin-left:25px"></span>200
<br><br>
<span style="margin-left:25px"></span>180
<br><br>
<span style="margin-left:25px"></span>图 5.5 虚拟用户数与平均响应时间变化图
<br><br>
<span style="margin-left:25px"></span>（2）web服务器测试症状
<br><br>
<span style="margin-left:25px"></span>系统状态监控指标如下所示：
<br><br>
<span style="margin-left:25px"></span>线程池使用；
<br><br>
<span style="margin-left:25px"></span>JVM堆使用情况；内存；Zdev。通过以下两个监控工具进行观测以上的各个参数。
<br><br>
<span style="margin-left:25px"></span>WebSphere PMI
<br><br>
<span style="margin-left:25px"></span>图 5.6 并发瓶颈测试web服务器WebSphere PMI，用户数=20
<br><br>
<span style="margin-left:25px"></span>图 5.7 并发瓶颈测试web服务器WebSphere PMI，用户数=100
<br><br>
<span style="margin-left:25px"></span>在上图5.6，用户数为20，在测试运行期间活动线程大概是20~24，这意味着线程池中的大多数线程不忙。
<br><br>
<span style="margin-left:25px"></span>当JVM的内存使用量达到JVM堆大小时，许多内存是空闲的，没有发现内存问题。图5.7，用户数为100，在测试正在运行期间，活动线程数大概是90~100，这意味着大多数的JVM线程正在忙。当JVM的内存使用量达到JVM堆大小时，许多内存是空闲的，也没有发现内存问题。Vmstat命令
<br><br>
<span style="margin-left:25px"></span>vmstat 1 1000 | (while read -r line;
<br><br>
<span style="margin-left:25px"></span> do echo"$(date +'%Y-%m-%d %H:%M:%S'): $line" done) ) /usr/IBM/WebSphere/AppServer/profiles/AppSrv/jvm-agents/systemPerformenceDuringTest.txt在PuTTY中，输入以上命令，每一秒钟观测系统状态1000次，观测数据都被记录在名称为systemPerformenceDuringTest的文件中。
<br><br>
<span style="margin-left:25px"></span>图 5.8 并发瓶颈测试web服务器Vmstat，用户数=20，测试中
<br><br>
<span style="margin-left:25px"></span>在图5.8中，users=20，r(20，大多数时候CPU没有压力。
<br><br>
<span style="margin-left:25px"></span>pi/po值总是0，没有发生页面换入/换出现象，这意味着没有内存压力。图 5.9 并发瓶颈测试Vmstat，用户数=100，测试开始
<br><br>
<span style="margin-left:25px"></span>如图5.9所示，最初，r值非常小（((20），这意味着没有CPU压力。
<br><br>
<span style="margin-left:25px"></span>图 5.10 并发瓶颈测试web服务器Vmstat，用户数=100，测试中
<br><br>
<span style="margin-left:25px"></span>如图5.10所示，在测试期间，r值增长非常大（))20），保持了很长一段时间，这意味着发生了CPU压力。
<br><br>
<span style="margin-left:25px"></span>pi/po总是0，没有发生页面换入/换出，这意味着没有内存压力。在这段时间里，Zdev反应非常缓慢。完成测试10分钟后，Zdev响应恢复正常。在一些测试，Zdev由于太慢而宕掉，但停止测试后，发现Zdev反应也恢复正常。（3）EJB服务器测试症状
<br><br>
<span style="margin-left:25px"></span>下面是被监控的症状：
<br><br>
<span style="margin-left:25px"></span>对象远程代理线程池使用；
<br><br>
<span style="margin-left:25px"></span>JVM堆使用；内存使用；数据库连接池使用。通过以下两个监控工具获取以上两个指标的数据。
<br><br>
<span style="margin-left:25px"></span>WebSphere PMI
<br><br>
<span style="margin-left:25px"></span>图 5.11 并发瓶颈测试EJB服务器，用户数=100
<br><br>
<span style="margin-left:25px"></span>如图5.11所示，在一开始，EJB ORB活跃计数，发生了近95EJB远程调用，然后快速下降并保持稳定在约10。
<br><br>
<span style="margin-left:25px"></span>这意味着在大多数时候，很少发生EJB远程调用。DB2连接池使用率也很非常缓慢。可以看到，在这种情况下，EJB站点和DB2连接没有压力。Vmstat命令
<br><br>
<span style="margin-left:25px"></span>图 5.12 并发瓶颈测试EJB服务器，用户数=100，测试前
<br><br>
<span style="margin-left:25px"></span>如图5.12所示，r值非常小。
<br><br>
<span style="margin-left:25px"></span>ORB池大小=10，ORB活跃数=0，没有EJB远程调用发生。DB2空闲池大小=25，DB2使用率=0，没有DB2操作。图 5.13 并发瓶颈测试EJB服务器，用户数=100，测试开始
<br><br>
<span style="margin-left:25px"></span>如图5.13所示，一开始， ORB活跃数迅速出现峰值，此阶段 ORB池大小=100，
<br><br>
<span style="margin-left:25px"></span> ORB活跃数=75，说明 EJB端线程池增加至100， EJB被调用，活跃的线程有75个，此时 DB2使用百分比为80%，说明有数据库操作。DB2空闲池大小为40，说明连接池仍然有剩余。图 5.14 并发瓶颈测试EJB服务器，用户数=100，测试中
<br><br>
<span style="margin-left:25px"></span>如图5.14所示，开始测试之后两分钟：
<br><br>
<span style="margin-left:25px"></span> DB2使用率=0， ORB活跃数为7，之后长时间接近于0，偶尔 DB2使用率为10， ORB活跃数为4，说明 EJB操作频率非常低， DB2操作频率更低，这和监测到 EJB端 CPU压力下降的现象是相符的。5.2.2.4结论与调优
<br><br>
<span style="margin-left:25px"></span>当虚拟用户个数达到20时，系统搜索功能不能运行良好。
<br><br>
<span style="margin-left:25px"></span>为了测试系统的总体性能，设置用例，包括所有操作，这些操作有一定的可能性。用例，如：
<br><br>
<span style="margin-left:25px"></span>用户VUs=100，循环Loop=1。Web服务器启动没有压力。
<br><br>
<span style="margin-left:25px"></span>在一个时间点，Web服务器开始有压力，r值不断增加这意味着越来越多的线程正在等待CPU，CPU使用率几乎达到90%。处理请求的时间增加。但是系统还没有死掉。内存使用量在正常水平。一开始，EJB服务器压力。因为Web服务器达到了瓶颈，EJB服务器压力减少。5.2.3内存泄露测试
<br><br>
<span style="margin-left:25px"></span>5.2.3.1内存泄露测试策略
<br><br>
<span style="margin-left:25px"></span>为用户设置适当的值（不高并发量以至于不影响系统性能），设置更多次的循环，设置用例包括所有具有一定可能性的操作。
<br><br>
<span style="margin-left:25px"></span>执行多次以减少错误，提高准确性。例如：Loop)10005.2.3.2内存泄露测试目标
<br><br>
<span style="margin-left:25px"></span>遍历主要应用场景来找出导致内存泄漏的任何可能。
<br><br>
<span style="margin-left:25px"></span>5.2.3.3内存泄露测试结果
<br><br>
<span style="margin-left:25px"></span>（1）平均时间
<br><br>
<span style="margin-left:25px"></span>表5.3 内存泄露测试的平均时间
<br><br>
<span style="margin-left:25px"></span>时间
<br><br>
<span style="margin-left:25px"></span>用例
<br><br>
<span style="margin-left:25px"></span>用户数
<br><br>
<span style="margin-left:25px"></span>Web池大小
<br><br>
<span style="margin-left:25px"></span>Loop
<br><br>
<span style="margin-left:25px"></span>ramp-up（秒）
<br><br>
<span style="margin-left:25px"></span>JMeter位置
<br><br>
<span style="margin-left:25px"></span>平均时间（秒）
<br><br>
<span style="margin-left:25px"></span>11/15
<br><br>
<span style="margin-left:25px"></span>所有操作
<br><br>
<span style="margin-left:25px"></span>14
<br><br>
<span style="margin-left:25px"></span>100
<br><br>
<span style="margin-left:25px"></span>1000
<br><br>
<span style="margin-left:25px"></span>200
<br><br>
<span style="margin-left:25px"></span>Local/ZDEV
<br><br>
<span style="margin-left:25px"></span>10/29
<br><br>
<span style="margin-left:25px"></span>所有操作
<br><br>
<span style="margin-left:25px"></span>50
<br><br>
<span style="margin-left:25px"></span>100
<br><br>
<span style="margin-left:25px"></span>Local/ZDEV
<br><br>
<span style="margin-left:25px"></span>2.4
<br><br>
<span style="margin-left:25px"></span>11/16
<br><br>
<span style="margin-left:25px"></span>所有操作
<br><br>
<span style="margin-left:25px"></span>15
<br><br>
<span style="margin-left:25px"></span>100
<br><br>
<span style="margin-left:25px"></span>10000
<br><br>
<span style="margin-left:25px"></span>500
<br><br>
<span style="margin-left:25px"></span>Local/ZDEV
<br><br>
<span style="margin-left:25px"></span>1.62
<br><br>
<span style="margin-left:25px"></span>11/18
<br><br>
<span style="margin-left:25px"></span>所有操作
<br><br>
<span style="margin-left:25px"></span>50
<br><br>
<span style="margin-left:25px"></span>100
<br><br>
<span style="margin-left:25px"></span>5000
<br><br>
<span style="margin-left:25px"></span>500
<br><br>
<span style="margin-left:25px"></span>Local/ZDEV
<br><br>
<span style="margin-left:25px"></span>n/a
<br><br>
<span style="margin-left:25px"></span>11/19
<br><br>
<span style="margin-left:25px"></span>所有操作
<br><br>
<span style="margin-left:25px"></span>50
<br><br>
<span style="margin-left:25px"></span>100
<br><br>
<span style="margin-left:25px"></span>5000
<br><br>
<span style="margin-left:25px"></span>500
<br><br>
<span style="margin-left:25px"></span>Local/ZDEV
<br><br>
<span style="margin-left:25px"></span>在11/19用例中，4电脑测试运行了6小时。
<br><br>
<span style="margin-left:25px"></span>但是在每个电脑，JMeter每半个小时杀死一个线程。随着时间，它会导致平均时间下降。在11/18用例中，Zdev因为太慢而宕掉。但停止测试后，发现Zdev响应恢复正常。同样的结论也已经从之前测试得出过，所以可以说，没有发生内存泄漏情况。（2）web服务器测试症状
<br><br>
<span style="margin-left:25px"></span>监视状态线程池使用、JVM堆使用、内存、Zdev，随着时间，发现Web服务器压力不上升，内存使用处于正常水平。
<br><br>
<span style="margin-left:25px"></span>因此，应用程序没有内存链接问题。（3）EJB服务器测试症状
<br><br>
<span style="margin-left:25px"></span>通过监视EJB服务器的状态，如：
<br><br>
<span style="margin-left:25px"></span>对象远程代理（ORB）线程池使用、JVM堆使用、内存使用、数据库连接池使用，没有发现压力。5.2.3.4结论与调优
<br><br>
<span style="margin-left:25px"></span>定价应用程序没有内存泄漏问题。
<br><br>
<span style="margin-left:25px"></span>5.2.4功能性能测试
<br><br>
<span style="margin-left:25px"></span>5.2.4.1功能性能测试策略
<br><br>
<span style="margin-left:25px"></span>测试用例包括某些操作，如：
<br><br>
<span style="margin-left:25px"></span>搜索、更新、删除、质量、批量变化。5.2.4.2功能性能测试目标
<br><br>
<span style="margin-left:25px"></span>测试一个操作的性能，它关注特定操作或缓慢的一步。
<br><br>
<span style="margin-left:25px"></span>它有两个用例需要测试：系统中主要的操作场景，测试平均响应时间，大多数的主要操作测试完成之后，发现最慢的操作和步骤。它是优化应用程序的一个方向。可能有特殊的要求的一些操作场景，如：有更多的入口或有更多的日期范围，这个测试是寻找缓慢操作或步骤一个方法。5.2.4.3功能性能测试结果
<br><br>
<span style="margin-left:25px"></span>（1）平均时间
<br><br>
<span style="margin-left:25px"></span>每一个操作的平均时间是2~3秒钟。
<br><br>
<span style="margin-left:25px"></span>（2）web服务器测试症状
<br><br>
<span style="margin-left:25px"></span>没有发现压力。
<br><br>
<span style="margin-left:25px"></span>（3）EJB服务器测试症状
<br><br>
<span style="margin-left:25px"></span>没有发现压力。
<br><br>
<span style="margin-left:25px"></span>5.2.5实际生产环境性能
<br><br>
<span style="margin-left:25px"></span>5.2.5.1实际生产环境性能测试策略
<br><br>
<span style="margin-left:25px"></span>设置生产环境中实际用户量的10倍的数量和循环次数也设置10倍。
<br><br>
<span style="margin-left:25px"></span>5.2.5.2实际生产环境性能测试目标
<br><br>
<span style="margin-left:25px"></span>测试在实际生产环境中的系统性能。
<br><br>
<span style="margin-left:25px"></span>5.2.5.3实际生产环境性能测试结果
<br><br>
<span style="margin-left:25px"></span>（1）平均时间
<br><br>
<span style="margin-left:25px"></span>每一个操作的平均时间是2~3秒钟。
<br><br>
<span style="margin-left:25px"></span>（2）web服务器测试症状
<br><br>
<span style="margin-left:25px"></span>没有发现压力。
<br><br>
<span style="margin-left:25px"></span>（3）EJB服务器测试症状
<br><br>
<span style="margin-left:25px"></span>没有发现压力。
<br><br>
<span style="margin-left:25px"></span>5.2.5.4结论与调优
<br><br>
<span style="margin-left:25px"></span>在生产环境中，定价应用程序没有性能问题。
<br><br>
<span style="margin-left:25px"></span>5.2.6排除网络传输的系统性能
<br><br>
<span style="margin-left:25px"></span>5.2.6.1测试策略
<br><br>
<span style="margin-left:25px"></span>在应用程序web服务器部署主机上运行JMeter，在这种情况下DO2-pricing网站部署在232主机上。
<br><br>
<span style="margin-left:25px"></span>5.2.6.2测试目标
<br><br>
<span style="margin-left:25px"></span>测试在实际生产环境中系统的性能。
<br><br>
<span style="margin-left:25px"></span>5.2.6.3测试结果
<br><br>
<span style="margin-left:25px"></span>（1）平均时间
<br><br>
<span style="margin-left:25px"></span>表5.4 排除网络传输的系统性能测试的平均时间
<br><br>
<span style="margin-left:25px"></span>日期
<br><br>
<span style="margin-left:25px"></span>用例
<br><br>
<span style="margin-left:25px"></span>用户数
<br><br>
<span style="margin-left:25px"></span>Web Pool Size
<br><br>
<span style="margin-left:25px"></span>Loop
<br><br>
<span style="margin-left:25px"></span>ramp-up（秒）
<br><br>
<span style="margin-left:25px"></span>JMeter Location
<br><br>
<span style="margin-left:25px"></span>平均时间
<br><br>
<span style="margin-left:25px"></span>12/10
<br><br>
<span style="margin-left:25px"></span>View Pricing option
<br><br>
<span style="margin-left:25px"></span>100
<br><br>
<span style="margin-left:25px"></span>10
<br><br>
<span style="margin-left:25px"></span>Local/ZDEV
<br><br>
<span style="margin-left:25px"></span>3.4
<br><br>
<span style="margin-left:25px"></span>12/10
<br><br>
<span style="margin-left:25px"></span>View Pricing option
<br><br>
<span style="margin-left:25px"></span>100
<br><br>
<span style="margin-left:25px"></span>10
<br><br>
<span style="margin-left:25px"></span>ZDEV/ZDEV
<br><br>
<span style="margin-left:25px"></span>1.4
<br><br>
<span style="margin-left:25px"></span>5.2.6.4结论与调优
<br><br>
<span style="margin-left:25px"></span>在一个响应实践中，网络传输花费了一半的时间。
<br><br>
<span style="margin-left:25px"></span>真正的生产不会有太多的网络传输，它将会比HT站点的性能更好。5.3本章小结
<br><br>
<span style="margin-left:25px"></span>对系统进行并发瓶颈测试、内存泄漏测试、功能性能测试、实际生产环境性能测试、排除网络传输的性能测试，
<br><br>
<span style="margin-left:25px"></span>并从以上几个方面进行结果分析并提出调优方案。第6章总结与展望
<br><br>
<span style="margin-left:25px"></span>6.1总结
<br><br>
<span style="margin-left:25px"></span>本文在对软件性能测试概括描述以及基于 web的医疗保险信息管理系统概述的基础上，展开了软件性能测试瓶颈与需求的分析，
<br><br>
<span style="margin-left:25px"></span>对基于 web的医疗保险信息管理系统软件性能测试进行深入探讨，并执行测试，对测试结果进行分析。本文主要通过基于web的医疗保险信息管理系统的定价子系统的功能和业务的角度进行需求分析，对本系统有个全面的了解，设定本次性能测试的目标。
<br><br>
<span style="margin-left:25px"></span>并根据本系统定价子系统的数据源和工作负载特征设计测试用例。在这里选择 JMeter作为此医疗保险信息管理系统的测试工具进行性能测试，性能测试的实施主要包括性能测试工具的选择、性能测试的平台选择、测试方案的制定、测试环境设计、测试场景设计、测试场景的执行等。主要对系统进行并发瓶颈测试、内存泄漏测试、功能性能测试、实际生产环境性能测试、排除网络传输的性能测试。本次软件性能测试主要是为了找出此基于 web的医疗保险信息管理系统中有可能存在的性能问题和有可能存在的瓶颈，
<br><br>
<span style="margin-left:25px"></span>本次性能测试结合这个基于 web的医疗保险信息管理系统的特征，不仅用测试工具去运行一些测试脚本来证明产品是否可以达到性能指标，更关键是要发现产品性能上的缺陷，并解决定位问题，这才是软件性能测试的真正目的。6.2展望
<br><br>
<span style="margin-left:25px"></span>软件性能测试是软件质量的一个重要保障，国内对性能测试的研究水平还比较低，而且国内研究开发的测试工具数量很少，
<br><br>
<span style="margin-left:25px"></span>这或许与国内的软件开发的发展有一定得紧密联系。国内的软件测试还处于不成熟的发展水平，要想超过国外的水平还需要一定的时间。但是在国内，软件测试还属于新兴的行业，其发展速度还是非常快的，相信随着国内软件行业及知识产权保护的发展，性能测试的研究必定会越来越成熟。参考文献
<br><br>
<span style="margin-left:25px"></span>[1]赫建营，晏海华，刘超，金茂忠. 一种有效的Web性能测试方法及其应用[J]. 计算机应用研究，2007，01:
<br><br>
<span style="margin-left:25px"></span>275-277+285.[2]宫云战. 软件测试[M]. 北京:
<br><br>
<span style="margin-left:25px"></span> 国防工业出版社. 2006.[3]景宏磊，林丁报. 软件性能测试的基本概念与一般过程[J]. 科技资讯，2011，19:
<br><br>
<span style="margin-left:25px"></span>22.[4]蔡立志，杨根兴. 软件系统性能测试方法初探[J]. 信息技术与标准化，2005，07:
<br><br>
<span style="margin-left:25px"></span>44-50.[5]温艳冬. 软件性能测试需求的获取方法综述[J]. 软件工程师，2010，Z1:
<br><br>
<span style="margin-left:25px"></span>124-127.[6]韩明军. 软件性能测试过程[J]. 信息技术与标准化，2007，11:
<br><br>
<span style="margin-left:25px"></span>41-43.[7]韩庆良. 软件性能测试过程研究与应用[D].山东大学，2007.
<br><br>
<span style="margin-left:25px"></span>[8]赵丽莉，金学军. 软件性能测试面面观[J]. 软件工程师，2006，11:
<br><br>
<span style="margin-left:25px"></span>40-42.[9]郁莲. 软件测试方法与实践[M]. 北京:
<br><br>
<span style="margin-left:25px"></span> 清华大学出版社， 2008.[10]李健. 基于Web应用系统的性能测试技术研究[D].西安电子科技大学，2010.
<br><br>
<span style="margin-left:25px"></span>[11]易敏捷. 软件测试国内外发展现状及趋势研究[J]. 电脑知识与技术，2013， 26:
<br><br>
<span style="margin-left:25px"></span> 6020-6022.[12]桑圣洪，胡飞.?
<br><br>
<span style="margin-left:25px"></span>性能测试工具LoadRunner的工作机理及关键技术研究[J].?科学技术与工程.?2007(06).[13]Xu Lei， XuBaowen.
<br><br>
<span style="margin-left:25px"></span> Research on the Analysis and Measurement for Testing Results of Web  Applications[J].  Second  International  Workshop  on  Web  Computing in Cyberworlds， 2005， 559~565.[14]孙莹，王华伟. 软件测试中存在的问题及对策[J]. 软件导刊，2015，01:
<br><br>
<span style="margin-left:25px"></span>50-51.[15]杨金凤，孟岩. 软件性能测试概述[J]. 电脑知识与技术，2011，34:
<br><br>
<span style="margin-left:25px"></span>8886-8888.[16]陈志皑. 软件性能测试初探[J]. 广东科技，2012，21:
<br><br>
<span style="margin-left:25px"></span>185-186.[17]王爽，李瑞路. 软件性能测试研究[J]. 现代商贸工业，2009，12:
<br><br>
<span style="margin-left:25px"></span>296-297.[18]朱怡雯，钱超，林勇. 软件性能测试工具综述[J]. 中国金融电脑，2009，07:
<br><br>
<span style="margin-left:25px"></span>79-82.[19]佘青. 利用Apache Jmeter进行Web性能测试的研究[J]. 智能计算机与应用，2012，02:
<br><br>
<span style="margin-left:25px"></span>55-57.[20]温素剑.零成本实现Web性能测试-基于Apache JMeter[M].北京:
<br><br>
<span style="margin-left:25px"></span>电子工业出版社，2012:27-29.[21]江新. 基于JMeter的MS Web应用系统的性能测试研究[D].南京航空航天大学，2011.
<br><br>
<span style="margin-left:25px"></span>[22]兰景英，王永恒.
<br><br>
<span style="margin-left:25px"></span> Web系统性能测试研究[J]. 计算机技术与发展，2008，11:90-93.

<br><br><br>
<div style="margin-left:25px">


</div>
</div>


<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2015 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
