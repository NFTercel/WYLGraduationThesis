<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威中文论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>


<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_2.htm">上一页</a>
<a class="pagelink" href="paper_4.htm">下一页</a>
<a class="pagelink" href="paper_12.htm">尾页</a>
页码：3/12页
]
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">94</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/195.htm' target='right' class='orange' >高级目标同样包含两个方面：</a><a href='../sentence_detail/196.htm' target='right' class='orange' >识别系统中的瓶颈和系统调优。</a><a href='../sentence_detail/197.htm' target='right' class='orange' >经过性能测试发现系统中存在的系统性能缺陷以及瓶颈，确认这些指标能否达到了用户的需要，整理性能测试结果并分析造成这些性能缺陷的原因，</a><span class='green'>撰写性能测试报告，为软件开发人员提交软件改进以及性能优化的依据建议。</span><a href='../sentence_detail/199.htm' target='right' class='orange' >基于以上的测试结果，开发人员可以对系统各个瓶颈进行调整优化。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">95</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.1.2.2性能测试过程</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">96</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/201.htm' target='right' class='orange' >根据软件工程的方法，性能测试可以划分为五个阶段，如下图所示：</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">97</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图 2.3 性能测试过程</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">98</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1、性能需求分析阶段</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">99</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/204.htm' target='right' class='orange' >该阶段的主要过程包括通过需求分析收集测试信息以及确定测试需求。</a><span class='green'>该阶段是测试过程中很重要的一个阶段，它直接与性能测试的有效性相关联。</span><span class='green'>测试需求可以从相关的文档中获取，所以在这个过程中，通过向软件开发方或者开发人员获取系统需求说明书，</span><span class='green'>用户使用手册等以及通过当面交谈咨询提问的方式获取软件测试信息[5]，然后对收集到的信息进行过滤、筛选、排除，</span><a href='../sentence_detail/208.htm' target='right' class='orange' >确定合格规范的测试需求，最终撰写出软件性能测试需求说明书。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">100</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/209.htm' target='right' class='orange' >需求分析主要包括两个内容：</a><span class='green'>一、确定测试目的；</span><span class='green'>二、确定性能测试指标。</span><span class='green'>其中测试目标包括三类：</span><span class='green'>验证性能是否符合需求？</span><span class='green'>检验软件性能的能力如何？</span><a href='../sentence_detail/215.htm' target='right' class='orange' >以及对软件进行调优提高性能。</a><a href='../sentence_detail/216.htm' target='right' class='orange' >其中性能符合性验证是验证软件是否符合设定的目标以及用户的应用要求。</a><a href='../sentence_detail/217.htm' target='right' class='orange' >性能力验证即是了解软件的整体性能指标状况。</a><span class='green'>确定性能指标主要是为后续测试提供一个标准，从而判断测试结果以及测试的结束[6]。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">101</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2、测试方案设计阶段</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">102</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>该阶段包括两个方面：</span><span class='green'>确定测试场景以及监视指标。</span><a href='../sentence_detail/222.htm' target='right' class='orange' >其中确定测试场景是在上一个阶段工作成果的前提之下，根据不同的测试需求，选取相应的测试业务，并采用场景设计方法确定实际测试业务场景，包括实际应用情况，如：</a><span class='green'>主要的业务流程、每个业务操作的概率及用户量等，其中在设计测试场景时需要主要思考的因素包括响应时间、并发用户数以及硬件使用情况率等参数。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">103</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3、测试实施阶段</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">104</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>该阶段主要是把上一个阶段的软件测试场景付诸于实施，然后通过分析确定系统缺点瓶颈。</span><span class='green'>该阶段可以细分成两个部分：</span><a href='../sentence_detail/227.htm' target='right' class='orange' >性能测试实施和性能瓶颈分析。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">105</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>其中，在测试实施阶段主要包括选用测试场景进行压力测试、负载测试等，同时还需要对系统资源进行监控。</span><a href='../sentence_detail/229.htm' target='right' class='orange' >在该阶段还包括了测试之前的准备工作，如：</a><a href='../sentence_detail/230.htm' target='right' class='orange' >测试环境的搭建、生成测试脚本、布置测试场景、执行测试场景[7]。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">106</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（1）测试环境搭建及数据准备</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">107</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/232.htm' target='right' class='orange' >这里的测试环境包括软件和硬件环境以及数据环境。</a><a href='../sentence_detail/233.htm' target='right' class='orange' >为了测试结果的准确性，必学搭建独立、逼真的软硬件环境和网络环境，安装测试软件。</a><a href='../sentence_detail/234.htm' target='right' class='orange' >准备的测试数据可以自己选取准备也可以从用户方获取，但是必须确保测试数据的合法规范，</a><span class='green'>要避免无效不合法的垃圾数据，而且测试数据必须要包含了完整的业务流程的全部方面，</span><span class='green'>以下就环境搭建和数据准备两个方面具体分析：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">108</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>环境搭建</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">109</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/238.htm' target='right' class='orange' >测试环境搭建尽量与真实运行环境大致一样，这样测试结果才有参考价值。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">110</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>本系统的测试环境需要独立于其他的开发环境等，即需要确保被测试的系统在测试执行期间占用了测试环境的一切资源，</span><span class='green'>需要杜绝测试环境与其他环境的混合使用，如开发人员使用测试环境进行开发测试或者开发环境中的网络公共使用测试环境的网络。</span><span class='green'>在这些情况下，会干扰测试的执行进度，从而导致测试数据结果的不准确，甚至糟糕的是误导后续的系统调优，致使性能问题。</span><span class='green'>综上所述，本系统所搭建的测试需要具有资源独占性。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">111</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>同时还需要注意，随着系统测试的执行，期间测试环境可能会发生不断的改变，例如：</span><span class='green'>测试人员的增加减少、软件更新了新的版本等，所以在搭建的测试环境的时候，需要考虑测试环境是可以重复使用的。</span><span class='green'>然而，测试中的某些资源是可以有效控制的，这需要对其进行分类管理，这些资源包括：</span><span class='green'>测试环境中的硬件资源信息、测试环境中的软硬件配置手册等。</span><span class='green'>对这些可以控制资源的管理备份，目的在于当测试环境出现调整或者故障时，能够便于迅速还原测试环境。</span><span class='green'>搭建完成之后的测试环境在软件测试过程中、测试软件安装之前都有必要对其进行备份，同时还需要备份操作系统，在这样操作之后，会带来两个好处：</span><span class='green'>1、当软件新版本发布，需要进行下一轮测试时，就可以直接还原测试环境，免得重新搭建测试环境带来的时间人力消耗；</span><span class='green'>2、在测试过程中出现测试故障以及在现有测试环境中已经不能再进行测试时，可以进行数据恢复，免得由于丢失数据而造成的损失。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">112</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>测试数据准备</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">113</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/252.htm' target='right' class='red' >在实施性能测试时，需要运行系统相关业务，这时需要一些数据支持才可运行业务，这部分数据即为初始测试数据，</a><a href='../sentence_detail/253.htm' target='right' class='red' >数据准备和清理的工作量是非常大的，需要在测试前提前考虑。</a><a href='../sentence_detail/254.htm' target='right' class='red' >为更加真实的模拟现实运行环境，在测试过程中，应尽可能准备与真实业务执行相一致的初始数据，如系统用户数据、业务数据、辅助数据等。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">114</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>在性能测试的实施过程中，需要遍历所有主要的业务流程，而这些流程是由输入的参数数据所驱动，所以其间不可避免的就需要涉及到业务数据。</span><span class='green'>况且数据的有效性以及合理性直接影响了性能测试的效果，所以数据的选取清洗、数据准备在测试之前就需要进行充分地考虑，</span><span class='green'>而且这些数据要尽量地与真实的业务数据相吻合，而这些数据主要包括以下几种类型。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">115</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>系统用户数据：</span><a href='../sentence_detail/259.htm' target='right' class='orange' >真实用户登录系统的用户名、密码等；</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">116</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>业务数据：</span><a href='../sentence_detail/261.htm' target='right' class='orange' >测试工具产生的虚拟用户需要模拟真实用户的实际流程动作，这个期间所使用的数据；</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">117</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>可重用数据：</span><span class='green'>这类数据指的是虚拟用户在操作中只需要使用一次的随机数据，包括一些查询类的数据。</span><span class='green'>这些数据可以重复的使用，所以在准备数据时，它们可以只需要设计一次；</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">118</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>不可重用数据：</span><span class='green'>这类数据不可以重复使用，用完一次就不能被再次使用，主要包括一些唯一性标识性质的数据。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">119</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（2）测试脚本生成</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">120</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>测试脚本可以自己手工编写还可以由测试工具自动生成，但是必须要求脚本信息的有效性，为了使脚本与实际运行相吻合，还需要对脚本进行参数化、动态数据关联等操作；</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">121</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（3）测试场景布置</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">122</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/270.htm' target='right' class='orange' >根据设计好的测试场景布置各个测试场景，包括虚拟用户数、性能指标的设置；</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">123</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（4）测试场景执行</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">124</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/272.htm' target='right' class='orange' >测试场景布置完成之后，就可以按照开始执行性能测试实施了。</a><a href='../sentence_detail/273.htm' target='right' class='orange' >在测试过程中，需要根据碰到过多的错误，需要终止测试、查找原因。</a><span class='green'>如果是非软件方面的原因，需要及时排除，重新测试；</span><span class='green'>如果是碰到了软件方面的原因，需要记录测试结果，以便后续的结果分析。</span><span class='green'>需要注意的时，在测试实施之前，需要将测试环境初始化到原始最初的状态。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">125</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/277.htm' target='right' class='orange' >在性能瓶颈分析部分，对比分析测试结果数据与标准指标数据，确定软件系统系能是否存在瓶颈。</a><span class='green'>系统瓶颈主要包括三个方面软件代码级别、软件配置级别和操作系统级别。</span><span class='green'>其中代码级别包括内存堆栈使用是否溢出、资源获取是否死锁等信息；</span><span class='green'>软件配置级别包括数据库连接数以及内存分配等配置、虚拟机配置等信息；</span><span class='green'>操作系统级别包括服务器的硬盘读写速度、内存大小、CPU等。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">126</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4、测试结果分析阶段</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">127</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/283.htm' target='right' class='orange' >该阶段是测试所有环节中重要的部分，也是难点。</a><span class='green'>首先，查看软件测试结果中是否出现错误以及超时信息，如果出现了，需要进一步查找原因，如：</span><span class='green'>程序代码、算法、设置参数问题、硬件问题。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">128</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>5、性能调优阶段</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">129</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/287.htm' target='right' class='orange' >根据上诉软件测试阶段的实施以及瓶颈分析步骤之后，本阶段主要是通过调优方法，对系统性能瓶颈进行调优，消除性能隐患。</a><a href='../sentence_detail/288.htm' target='right' class='orange' >同样的，与性能瓶颈相一致，性能调优也包括三个方面：</a><a href='../sentence_detail/289.htm' target='right' class='orange' >分别是代码级别调优、软件配置级别调优、操作系统级别调优。</a><span class='green'>其中，操作系统级别调优主要检查操作系统配置是否合理，如果通过操作系统配置还不能提高性能，则需要考虑升级系统硬件。</span><span class='green'>软件配置调优主要是通过合理配置应用系统中的数据库连接数或者虚拟机内存等参数来提高系统。</span><span class='green'>代码级别的调优主要是通过组织代码编写结构、修补造成内存泄露的代码等方式来消除代码执行效率低的问题[8]。</span>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_2.htm">上一页</a>
<a class="pagelink" href="paper_4.htm">下一页</a>
<a class="pagelink" href="paper_12.htm">尾页</a>
页码：3/12页
]
</div>

<br><br><br>
<div style="margin-left:25px">

<img src="../../images/guanwang.gif">
</div>
</div>


<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2015 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
